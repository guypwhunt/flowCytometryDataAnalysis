x = df,
y = cellPopulations[, c(clusterName, "typeOfCells")],
by.x = clusterName,
by.y = clusterName,
all.x = TRUE
)
df$cluster_id <- df$cell_population
df <- updateMarkerNames(df)
df <- df[order(df$typeOfCells),]
df$ID <- as.factor(as.numeric(factor(df$typeOfCells, levels = unique(df$typeOfCells))))
df$typeOfCells <-
paste0(df$typeOfCells, " (", df$ID, ")")
df$typeOfCells <-
factor(df$typeOfCells, levels = unique(df$typeOfCells))
metacluster_colours <-
as.vector(colortools::wheel('#F8766D', num = length(levels(df$typeOfCells))))
label <-
df %>% group_by(ID, typeOfCells) %>%
dplyr::select(umap_1, umap_2) %>% summarize_all(mean) %>%
as.data.frame()
par(mar = c(1, 1, 1, 1))
plot <-
ggplot(df, aes(
x = umap_1,
y = umap_2,
color = as.factor(typeOfCells)
)) +
geom_point(size = 0.1) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_label_repel(
aes(label = as.integer(ID)),
data = label
,
size = 2,
force_pull = 0,
max.time = 2,
show.legend = FALSE,
max.overlaps = Inf
) +
labs(y = "UMAP 2", x = "UMAP 1")  +
scale_color_manual(values = metacluster_colours) +
guides(
color = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
),
fill = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
),
guide = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
)
)
print(plot)
})
}
rm(list = ls()[!ls() %in% c("directoryNames", "clusterNames",
"directoryName", "clusterName")])
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
}
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directoryNames <- c(
# "gpr18BCells"#,
# "gpr18Monocytes"#,
"gpr18Senescence",
# "gpr18TCells",
# "gpr32BCells"#,
# "gpr32Monocytes"#,
"gpr32Senescence"#,
# "gpr32TCells"
)
clusterNames <- clusterColumns[3:4]
# clusterName <- clusterNames[1]
#
# directoryName <- "gpr32TCells"
for (directoryName in directoryNames) {
message()
message(directoryName)
for (clusterName in clusterNames) {
message(clusterName)
try({
df <-
as.data.frame(fread(
paste0('data/', directoryName, '/clusteringOutput/umapDf.csv')
))
markerPopulations <-
as.data.frame(fread(
paste0(
'data/',
directoryName,
'/clusteringOutput/',
clusterName,
'Markers.csv'
)
))
cellPopulations <-
as.data.frame(fread(
paste0(
'data/',
directoryName,
'/clusteringOutput/',
clusterName,
'CellPopulations.csv'
)
))
colnames(cellPopulations)[colnames(cellPopulations) == "cell_population"] <-
"typeOfCells"
df <-
merge(
x = df,
y = markerPopulations[, c(clusterName, "cell_population")],
by.x = clusterName,
by.y = clusterName,
all.x = TRUE
)
df <-
merge(
x = df,
y = cellPopulations[, c(clusterName, "typeOfCells")],
by.x = clusterName,
by.y = clusterName,
all.x = TRUE
)
df$cluster_id <- df$cell_population
df <- updateMarkerNames(df)
df <- df[order(df$typeOfCells),]
df$ID <- as.factor(as.numeric(factor(df$typeOfCells, levels = unique(df$typeOfCells))))
df$typeOfCells <-
paste0(df$typeOfCells, " (", df$ID, ")")
df$typeOfCells <-
factor(df$typeOfCells, levels = unique(df$typeOfCells))
metacluster_colours <-
as.vector(colortools::wheel('#F8766D', num = length(levels(df$typeOfCells))))
label <-
df %>% group_by(ID, typeOfCells) %>%
dplyr::select(umap_1, umap_2) %>% summarize_all(mean) %>%
as.data.frame()
par(mar = c(1, 1, 1, 1))
plot <-
ggplot(df, aes(
x = umap_1,
y = umap_2,
color = as.factor(typeOfCells)
)) +
geom_point(size = 0.1) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_label_repel(
aes(label = as.integer(ID)),
data = label
,
size = 2,
force_pull = 0,
max.time = 2,
show.legend = FALSE,
max.overlaps = Inf
) +
labs(y = "UMAP 2", x = "UMAP 1")  +
scale_color_manual(values = metacluster_colours) +
guides(
color = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
),
fill = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
),
guide = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
)
)
print(plot)
})
}
rm(list = ls()[!ls() %in% c("directoryNames", "clusterNames",
"directoryName", "clusterName")])
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
}
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directoryNames <- c(
# "gpr18BCells"#,
# "gpr18Monocytes"#,
# "gpr18Senescence",
"gpr18TCells",
# "gpr32BCells"#,
# "gpr32Monocytes"#,
# "gpr32Senescence"#,
"gpr32TCells"
)
clusterNames <- clusterColumns[3:4]
# clusterName <- clusterNames[1]
#
# directoryName <- "gpr32TCells"
for (directoryName in directoryNames) {
message()
message(directoryName)
for (clusterName in clusterNames) {
message(clusterName)
try({
df <-
as.data.frame(fread(
paste0('data/', directoryName, '/clusteringOutput/umapDf.csv')
))
markerPopulations <-
as.data.frame(fread(
paste0(
'data/',
directoryName,
'/clusteringOutput/',
clusterName,
'Markers.csv'
)
))
cellPopulations <-
as.data.frame(fread(
paste0(
'data/',
directoryName,
'/clusteringOutput/',
clusterName,
'CellPopulations.csv'
)
))
colnames(cellPopulations)[colnames(cellPopulations) == "cell_population"] <-
"typeOfCells"
df <-
merge(
x = df,
y = markerPopulations[, c(clusterName, "cell_population")],
by.x = clusterName,
by.y = clusterName,
all.x = TRUE
)
df <-
merge(
x = df,
y = cellPopulations[, c(clusterName, "typeOfCells")],
by.x = clusterName,
by.y = clusterName,
all.x = TRUE
)
df$cluster_id <- df$cell_population
df <- updateMarkerNames(df)
df <- df[order(df$typeOfCells),]
df$ID <- as.factor(as.numeric(factor(df$typeOfCells, levels = unique(df$typeOfCells))))
df$typeOfCells <-
paste0(df$typeOfCells, " (", df$ID, ")")
df$typeOfCells <-
factor(df$typeOfCells, levels = unique(df$typeOfCells))
metacluster_colours <-
as.vector(colortools::wheel('#F8766D', num = length(levels(df$typeOfCells))))
label <-
df %>% group_by(ID, typeOfCells) %>%
dplyr::select(umap_1, umap_2) %>% summarize_all(mean) %>%
as.data.frame()
par(mar = c(1, 1, 1, 1))
plot <-
ggplot(df, aes(
x = umap_1,
y = umap_2,
color = as.factor(typeOfCells)
)) +
geom_point(size = 0.1) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_label_repel(
aes(label = as.integer(ID)),
data = label
,
size = 2,
force_pull = 0,
max.time = 2,
show.legend = FALSE,
max.overlaps = Inf
) +
labs(y = "UMAP 2", x = "UMAP 1")  +
scale_color_manual(values = metacluster_colours) +
guides(
color = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
),
fill = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
),
guide = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
)
)
print(plot)
})
}
rm(list = ls()[!ls() %in% c("directoryNames", "clusterNames",
"directoryName", "clusterName")])
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
}
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directories <- c("gpr32BCells", "gpr32Monocytes"#, "gpr32TCells", "gpr32Senescence"
)
clusterNames <- c(#"clusters_flowsom", "meta_clusters_flowsom",
"meta_clusters_flowsomMarker",
#"clusters_phenograph",
"clusters_phenographMarker")
for (clusterName in clusterNames) {
fileName <- paste0(clusterName, "Stability.csv")
for (directory in directories) {
#try(dev.off())
df <-
read.csv(
paste0(
"data/",
directory,
"/clusteringOutput/",
fileName
)
)
if(clusterName=="meta_clusters_flowsomMarker"){
df[, clusterName] <- as.integer(rownames(df))
} else if (clusterName=="clusters_phenographMarker")
{df[, clusterName] <- as.integer(rownames(df))}
df <- df[, !colSums(is.na(df)) == nrow(df)]
df <- df[, c(1, seq(from=ncol(df)-99, to=ncol(df)))]
columnNames <- colnames(df)
columnNames <- columnNames[columnNames != clusterName]
longDf <- pivot_longer(df,
cols = columnNames,
names_to = 'iteration',
values_to = 'value')
longDf <- as.data.frame(longDf)
longDf[, clusterName] <- as.factor(longDf[, clusterName])
longDf$panel <- directory
if (exists("combinedDf")) {
combinedDf <- rbind(longDf, combinedDf)
} else {
combinedDf <- longDf
}
}
combinedDf[combinedDf$panel == "gpr32BCells", "panel"] <- "B Cells"
combinedDf[combinedDf$panel == "gpr32TCells", "panel"] <- "T Cells"
combinedDf[combinedDf$panel == "gpr32Monocytes", "panel"] <- "Monocytes"
combinedDf[combinedDf$panel == "gpr32Senescence", "panel"] <- "Senescent T Cells"
combinedDf$value <- combinedDf$value
for (directory in unique(combinedDf$panel)) {
for(cluster in unique(combinedDf[combinedDf$panel == directory, clusterName])) {
medianValue <-
median(combinedDf[combinedDf[, clusterName] == cluster &
combinedDf$panel == directory, "value"])
if (medianValue < 0.85) {
#  print(directory)
#  print(clusterName)
#  print(cluster)
#  print(medianValue)
}
}
}
print(ggplot(combinedDf, aes_string(x=clusterName, y="value", color = "panel")) +
geom_boxplot(show.legend = FALSE) +
geom_hline(yintercept=c(0.85, 0.75, 0.60), linetype=rep(c("dashed","twodash","dotted"),length(directories)), color = "black") +
ylim(0, 1) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE)) +
facet_wrap(~panel, scales = "free") +
theme_bw() +
# theme(axis.text.x=element_blank()) +
ylab("Jaccard Similarity Coefficient") +
xlab(if(clusterName == "clusters_flowsom"){
"FlowSOM Self Organising Maps"
} else if (clusterName == "meta_clusters_flowsom"){
"FlowSOM Meta-Clusters"
} else if (clusterName == "clusters_phenograph"){
"Phenograph Clusters"
} else if (clusterName == "clusters_phenographMarker"){
"Phenograph Cell Populations"
} else {
"FlowSOM Cell Populations"
})
)
rm(combinedDf)
}
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directories <-
c("gpr32BCells",
"gpr32Monocytes",
"gpr32TCells",
"gpr32Senescence")
clusterNames <- c(#"clusters_flowsom", "meta_clusters_flowsom",
"meta_clusters_flowsomMarker",
#"clusters_phenograph",
"clusters_phenographMarker")
for (clusterName in clusterNames) {
fileName <- paste0(clusterName, "Stability.csv")
for (directory in directories) {
#try(dev.off())
df <-
read.csv(paste0("data/",
directory,
"/clusteringOutput/",
fileName))
if (clusterName == "meta_clusters_flowsomMarker") {
# df[, clusterName] <- as.integer(rownames(df))
} else if (clusterName == "clusters_phenographMarker")
{
# df[, clusterName] <- as.integer(rownames(df))
}
df <- df[,!colSums(is.na(df)) == nrow(df)]
df <- df[, c(1, seq(from = ncol(df) - 99, to = ncol(df)))]
columnNames <- colnames(df)
columnNames <- columnNames[columnNames != clusterName]
longDf <- pivot_longer(df,
cols = columnNames,
names_to = 'iteration',
values_to = 'value')
longDf <- as.data.frame(longDf)
longDf[, clusterName] <- as.factor(longDf[, clusterName])
longDf$panel <- directory
if (exists("combinedDf")) {
combinedDf <- rbind(longDf, combinedDf)
} else {
combinedDf <- longDf
}
}
combinedDf[combinedDf$panel == "gpr32BCells", "panel"] <-
"B Cells"
combinedDf[combinedDf$panel == "gpr32TCells", "panel"] <-
"T Cells"
combinedDf[combinedDf$panel == "gpr32Monocytes", "panel"] <-
"Monocytes"
combinedDf[combinedDf$panel == "gpr32Senescence", "panel"] <-
"Senescent T Cells"
combinedDf$value <- combinedDf$value
for (directory in unique(combinedDf$panel)) {
for (cluster in unique(combinedDf[combinedDf$panel == directory, clusterName])) {
medianValue <-
median(combinedDf[combinedDf[, clusterName] == cluster &
combinedDf$panel == directory, "value"])
if (medianValue < 0.85) {
#  print(directory)
#  print(clusterName)
#  print(cluster)
#  print(medianValue)
}
}
}
print(
ggplot(
combinedDf,
aes_string(x = clusterName, y = "value", color = "panel")
) +
geom_boxplot(show.legend = FALSE) +
geom_hline(
yintercept = c(0.85, 0.75, 0.60),
linetype = rep(c("dashed", "twodash", "dotted"), length(directories)),
color = "black"
) +
ylim(0, 1) +
scale_x_discrete(guide = guide_axis(check.overlap = TRUE)) +
facet_wrap( ~ panel, scales = "free") +
theme_bw() +
# theme(axis.text.x=element_blank()) +
ylab("Jaccard Similarity Coefficient") +
xlab(if (clusterName == "clusters_flowsom") {
"FlowSOM Self Organising Maps"
} else if (clusterName == "meta_clusters_flowsom") {
"FlowSOM Meta-Clusters"
} else if (clusterName == "clusters_phenograph") {
"Phenograph Clusters"
} else if (clusterName == "clusters_phenographMarker") {
"Phenograph Cell Populations"
} else {
"FlowSOM Cell Populations"
})
)
rm(combinedDf)
}
