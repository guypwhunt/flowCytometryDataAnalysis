colnames(df)
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
filenames
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
test <- TRUE
workingDirectory <- getwd()
setwd(paste0("./data/", directoryName))
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
if (test) {
filenames <- filenames[1:2]
}
df <- read.csv(filenames[1])
colnames(df)
## Defining a function to read a flow cytrometry file in csv format:
# Each row is a cell, each column is a parameter. In our experience, the flow cytometers sometimes output duplicate entries (listing the same cell twice), we remove these and report.
# Please check how your csv file is separated and adjust the sep argument in the function if necessary. In this example we import a semicolon separated file.
read.flow_csv <- function(pathIN){
raw <- read.csv(pathIN, sep=",", header=TRUE, stringsAsFactors=FALSE)
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if(any(duplicated(raw))){
cat(paste0("=== Duplicate entries removed in [",pathIN,"]: ",length(IND)," ===\n"))
print(head(raw[IND,]))
cat("----\n")
}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames,read.flow_csv,simplify=FALSE)
gc()
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat){
# Compute required metadata - column names with description - ranges, min, and max settings
meta <- data.frame(name=dimnames(dat)[[2]],
desc=paste(dimnames(dat)[[2]]),
range =(apply(apply(dat,2,range),2,diff)),
minRange = apply(dat,2,min),
maxRange = apply(dat,2,max))
# Create flowframe
flowframef <- new("flowFrame",exprs=as.matrix(dat),parameters=AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs,function(x) csv_2_ff(x),simplify=FALSE)
gc()
rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff,"flowSet")
gc()
rm(dfs_ff)
###############################
####### TRANSFORMATION ########
###############################
## Each parameter of interest needs to be arcsinh transformed with an individual cofactor. The cofactor can be deduced from the size of the linear region around zero on a biexponential scale, as plotted in a histogram (in conventional gating software).
# Choose manual transformation or automated transformation (we prefer manual)
# Define parameters and cofactors for transformations:
gc()
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
gc()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A")
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
test <- FALSE
preprocessing(directoryName,columnNames, test)
gc()
gc()
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
test <- FALSE
preprocessing(directoryName,columnNames, test)
library(R.utils)
workingDirectory <- getwd()
dataDirectorys <- c("/data/bCells"
#,"/data/monocytes",
#"/data/senescence","/data/tCells"
)
for (directory in dataDirectorys) {
try(setwd(paste0(workingDirectory,directory)))
gzFilenames <- list.files(pattern = ".gz")
for (gzFilename in gzFilenames) {
gunzip(gzFilename)
}
}
setwd(workingDirectory)
getwd()
library(R.utils)
workingDirectory <- getwd()
dataDirectorys <- c("/data/bCells","/data/monocytes",
"/data/senescence","/data/tCells")
for (directory in dataDirectorys) {
try(setwd(paste0(workingDirectory,directory)))
print(getwd())
filenames <- list.files(pattern = ".csv")
for (filename in filenames) {
gzip(filename)
}
}
setwd(workingDirectory)
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
columnNames <- bCellsColumnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames
as.formula(paste("caseControl", paste(columnNames, collapse=" + "), sep=" ~ "))
bCellsDirectoryName <- "bCells"
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
tCellsDirectoryName <- "tCells"
tCellsColumnNames <- c("GPR32","CD127","CD3", "Zombie.NIR.A","CD8", "CD25", "FoxP3", "CD45RO", "CD4")
monocytesDirectoryName <- "monocytes"
monocytesColumnNames <- c("CD11b","CD14", "Zombie.NIR.A","CD16", "CD11b activated")
test <- FALSE
directoryName <- bCellsDirectoryName
columnNames <- bCellsColumnNames
as.formula(paste("caseControl", paste(columnNames, collapse=" + "), sep=" ~ "))
formula <- as.formula(paste(" ~ ", columnName))
formula <- as.formula(paste(" ~ ", columnNames))
columnNameFormula <- as.formula(paste(" ~ ", columnNames))
columnNameFormula <- as.formula(paste(" ~ ", "densityPlot" #columnName
))
columnNameFormula
gc()
try(source("R/03_functions.R"))
bCellsDirectoryName <- "bCells"
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
directoryName <- bCellsDirectoryName
columnNames <- bCellsColumnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
convertToDataFrame(directoryName, columnNames, test)
loadlibraries()
convertToDataFrame(directoryName, columnNames, test)
directoryName
getwd()
setwd("..")
setwd("..")
getwd()
convertToDataFrame(directoryName, columnNames, test)
test <- TRUE
convertToDataFrame(directoryName, columnNames, test)
workingDirectory <- getwd()
clinicalData <- read.csv('data/metadata/metadata.csv')
getwd()
setwd("..")
setwd("..")
workingDirectory <- getwd()
workingDirectory
clinicalData <- read.csv('data/metadata/metadata.csv')
setwd(paste0("./data/", directoryName))
dirFCS <- paste0(getwd(), "/dataPPOutput")
pathST <- "X:/Users/guypw/OneDrive/Documents.txt"
read.flowdat <- function(dir,path_CSPLR_ST=""){
# Read:
filepaths <- list.files(path=dir,pattern = ".fcs", full.names=TRUE)
flowset <- read.flowSet(files=filepaths, transformation=FALSE,
truncate_max_range = FALSE)
# Transform to data frame:
x <- as.data.frame(exprs(as(flowset,'flowFrame')),stringsAsFactors=FALSE)
# Map column 'Original' to filename (in this case holding clusters of
# HSNE):
filenames <- gsub("[.fcs]","",list.files(path=dir,pattern = ".fcs",
full.names=FALSE))
names(filenames) <- sort(unique(x$Original))
x$fileName <- filenames[as.character(x$Original)]
# Remove column 'Original':
x <- x[,-which(colnames(x)=="Original")]
# Optionally remap Cytosplore sample tags to original filename:
if(file.exists(path_CSPLR_ST)){
# Read:
sampID <- gsub(
".fcs","",basename(sapply(strsplit(readLines(path_CSPLR_ST),": "),
function(x) x[1])))
names(sampID) <- sapply(
strsplit(readLines(path_CSPLR_ST),": "),function(x) x[2])
x$sampleID <- sampID[as.character(x$CSPLR_ST)]
}
return(x)
}
## Read fcs files
# In our example we will read the data which were clustered in Cytosplore
# (each fcs file is 1 cluster)
df <- read.flowdat(dir=dirFCS[1],path_CSPLR_ST = pathST)
df
gc()
if (test) {
df <- df[seq_len(nrow(df)/50),]
}
write.csv(df, 'dataPPOutput/rawDf.csv')
gc()
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
bCellsColumnNames
columnNames <- bCellsColumnNames
columnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
columnNames
columnNames <- c("GPR32...AF488.A", "IgD...PerCP.Cy5.5.A", "CD24...BV605.A", "CD27...BV650.A")
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
columnNames
columnNames
columnNames <- c("GPR32...AF488.A", "IgD...PerCP.Cy5.5.A", "CD24...BV605.A", "CD27...BV650.A")
columnNames
bCellsDirectoryName <- "bCells"
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
test <- TRUE
directoryName <- bCellsDirectoryName
columnNames <- bCellsColumnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
columnNames
columnNames
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
df <- df[,updatedColumnNames]
df
gc()
write.csv(df, 'dataPPOutput/columnsOfInterestDf.csv')
gc()
df <- merge(df, clinicalData, by.x = "fileName", by.y = "id")
df["caseControl"][df["caseControl"] == "Case"] <- 1
df["caseControl"][df["caseControl"] == "Control"] <- 0
df["fastSlow"][df["fastSlow"] == "Fast"] <- 1
df["fastSlow"][df["fastSlow"] == "Slow"] <- 0
df["fastSlow"][df["fastSlow"] == "N/A"] <- -1
gc()
write.csv(df, 'dataPPOutput/columnsOfInterestPlusClinicalDataDf.csv')
gc()
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
df <- merge(df, clinicalData, by.x = "fileName", by.y = "id")
df
clinicalData
df <- tryCatch({merge(df, clinicalData, by.x = "fileName", by.y = "ï..id")},
error=function(x) {
merge(df, clinicalData, by.x = "fileName", by.y = "id")
})
df
df["caseControl"][df["caseControl"] == "Case"] <- 1
df["caseControl"][df["caseControl"] == "Control"] <- 0
df["fastSlow"][df["fastSlow"] == "Fast"] <- 1
df["fastSlow"][df["fastSlow"] == "Slow"] <- 0
df["fastSlow"][df["fastSlow"] == "N/A"] <- -1
gc()
write.csv(df, 'dataPPOutput/columnsOfInterestPlusClinicalDataDf.csv')
gc()
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
getwd()
setwd(paste0("./data/", directoryName))
write.csv(df, 'dataPPOutput/columnsOfInterestPlusClinicalDataDf.csv')
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
library(readxl)
url <- "http://imlspenticton.uzh.ch/robinson_lab/cytofWorkflow"
md <- "PBMC8_metadata.xlsx"
download.file(file.path(url, md), destfile = md, mode = "wb")
md <- read_excel(md)
head(data.frame(md))
library(HDCytoData)
fs <- Bodenmiller_BCR_XL_flowSet()
panel <- "PBMC8_panel_v3.xlsx"
download.file(file.path(url, panel), destfile = panel, mode = "wb")
panel <- read_excel(panel)
head(data.frame(panel))
# spot check that all panel columns are in the flowSet object
all(panel$fcs_colname %in% colnames(fs))
# specify levels for conditions & sample IDs to assure desired ordering
md$condition <- factor(md$condition, levels = c("Ref", "BCRXL"))
md$sample_id <- factor(md$sample_id,
levels = md$sample_id[order(md$condition)])
# construct SingleCellExperiment
sce <- prepData(fs, panel, md, features = panel$fcs_colname)
library(flowCore)
# specify levels for conditions & sample IDs to assure desired ordering
md$condition <- factor(md$condition, levels = c("Ref", "BCRXL"))
md$sample_id <- factor(md$sample_id,
levels = md$sample_id[order(md$condition)])
# construct SingleCellExperiment
sce <- prepData(fs, panel, md, features = panel$fcs_colname)
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
BiocManager::install("HDCytoData")
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
#BiocManager::install("HDCytoData")
#BiocManager::install("CATALYST")
## Load the example dataset
suppressPackageStartupMessages(library(HDCytoData))
# Download and load 'Bodenmiller_BCR_XL' dataset in 'flowSet' format
d_flowSet <- Bodenmiller_BCR_XL_flowSet()
suppressPackageStartupMessages(library(flowCore))
# check data format
d_flowSet
# sample names
pData(d_flowSet)
# dimensions
dim(exprs(d_flowSet[[1]]))
# expression values
exprs(d_flowSet[[1]])[1:6, 1:5]
## Set up meta-data
# Meta-data: experiment information
# check sample order
filenames <- as.character(pData(d_flowSet)$name)
# sample information
sample_id <- gsub("^PBMC8_30min_", "", gsub("\\.fcs$", "", filenames))
group_id <- factor(
gsub("^patient[0-9]+_", "", sample_id), levels = c("Reference", "BCR-XL")
)
patient_id <- factor(gsub("_.*$", "", sample_id))
experiment_info <- data.frame(
group_id, patient_id, sample_id, stringsAsFactors = FALSE
)
experiment_info
# Meta-data: marker information
# source: Bruggner et al. (2014), Table 1
# column indices of all markers, lineage markers, and functional markers
cols_markers <- c(3:4, 7:9, 11:19, 21:22, 24:26, 28:31, 33)
cols_lineage <- c(3:4, 9, 11, 12, 14, 21, 29, 31, 33)
cols_func <- setdiff(cols_markers, cols_lineage)
# channel and marker names
channel_name <- colnames(d_flowSet)
marker_name <- gsub("\\(.*$", "", channel_name)
# marker classes
# note: using lineage markers for 'cell type', and functional markers for
# 'cell state'
marker_class <- rep("none", ncol(d_flowSet[[1]]))
marker_class[cols_lineage] <- "type"
marker_class[cols_func] <- "state"
marker_class <- factor(marker_class, levels = c("type", "state", "none"))
marker_info <- data.frame(
channel_name, marker_name, marker_class, stringsAsFactors = FALSE
)
marker_info
## Set up design matrix (or model formula)
suppressPackageStartupMessages(library(diffcyt))
# Create design matrix
# note: selecting columns containing group IDs and patient IDs (for an
# unpaired dataset, only group IDs would be included)
design <- createDesignMatrix(
experiment_info, cols_design = c("group_id", "patient_id")
)
## Set up contrast matrix
# Create contrast matrix
contrast <- createContrast(c(0, 1, rep(0, 7)))
# check
nrow(contrast) == ncol(design)
data.frame(parameters = colnames(design), contrast)
## Differential testing (Option 3: Individual functions)
# Prepare data
d_se <- prepareData(d_flowSet, experiment_info, marker_info)
# Transform data
d_se <- transformData(d_se)
# Generate clusters
# note: include random seed for reproducible clustering
d_se <- generateClusters(d_se, seed_clustering = 123)
# Calculate cluster cell counts
d_counts <- calcCounts(d_se)
# Calculate cluster medians
d_medians <- calcMedians(d_se)
# Test for differential abundance (DA) of cell populations
# Test for differential abundance (DA) of clusters
res_DA <- testDA_edgeR(d_counts, design, contrast)
# display table of results for top DA clusters
topTable(res_DA, format_vals = TRUE)
# calculate number of significant detected DA clusters at 10% false discovery
# rate (FDR)
threshold <- 0.1
table(topTable(res_DA, all = TRUE)$p_adj <= threshold)
# Test for differential states (DS) within cell populations
## UPDATE WITH markers_to_test PARAMETER
# Test for differential states (DS) within clusters
res_DS <- testDS_limma(d_counts, d_medians, design, contrast, plot = FALSE)
# display table of results for top DS cluster-marker combinations
topTable(res_DS, format_vals = TRUE)
# calculate number of significant detected DS cluster-marker combinations at
# 10% false discovery rate (FDR)
threshold <- 0.1
table(topTable(res_DS, all = TRUE)$p_adj <= threshold)
## Differential testing (Option 1)
# Test for differential abundance (DA) of clusters
# note: using default method 'diffcyt-DA-edgeR' and default parameters
# note: include random seed for reproducible clustering
out_DA <- diffcyt(
d_input = d_flowSet,
experiment_info = experiment_info,
marker_info = marker_info,
design = design,
contrast = contrast,
analysis_type = "DA",
seed_clustering = 123
)
out_DA <- diffcyt(
d_input = d_flowSet,
experiment_info = experiment_info,
marker_info = marker_info,
design = design,
contrast = contrast,
analysis_type = "DA",
seed_clustering = 123
)
# display table of results for top DA clusters
topTable(out_DA, format_vals = TRUE)
# calculate number of significant detected DA clusters at 10% false discovery
# rate (FDR)
threshold <- 0.1
res_DA_all <- topTable(out_DA, all = TRUE)
table(res_DA_all$p_adj <= threshold)
# Test for differential states (DS) within clusters
# note: using default method 'diffcyt-DS-limma' and default parameters
# note: include random seed for reproducible clustering
out_DS <- diffcyt(
d_input = d_flowSet,
experiment_info = experiment_info,
marker_info = marker_info,
design = design,
contrast = contrast,
analysis_type = "DS",
seed_clustering = 123,
plot = FALSE
)
# calculate number of significant detected DS cluster-marker combinations at
# 10% false discovery rate (FDR)
threshold <- 0.1
res_DS_all <- topTable(out_DS, all = TRUE)
table(res_DS_all$p_adj <= threshold)
out_DS
# Output object from 'diffcyt()' wrapper function
names(out_DA)
names(out_DA)
dim(out_DA$d_se)
rowData(out_DA$d_se)
names(out_DA)
dim(out_DA$d_se)
rowData(out_DA$d_se)
str(assay(out_DA$d_se))
head(assay(out_DA$d_se), 2)
# Extract cell-level table for export as .fcs file
# note: including group IDs, patient IDs, sample IDs, and cluster labels for
# each cell
# note: table must be a numeric matrix (to save as .fcs file)
d_fcs <- assay(out_DA$d_se)
class(d_fcs)
# Heatmap for top detected DA clusters
# note: use optional argument 'sample_order' to group samples by condition
sample_order <- c(seq(2, 16, by = 2), seq(1, 16, by = 2))
plotHeatmap(out_DA, analysis_type = "DA", sample_order = sample_order)
# Heatmap for top detected DA clusters (alternative code using 'CATALYST')
suppressPackageStartupMessages(library(CATALYST))
plotDiffHeatmap(out_DA$d_se, out_DA$res)
# Heatmap for top detected DS cluster-marker combinations
# note: use optional argument 'sample_order' to group samples by condition
sample_order <- c(seq(2, 16, by = 2), seq(1, 16, by = 2))
plotHeatmap(out_DS, analysis_type = "DS", sample_order = sample_order)
d_counts
design
contrast
library(SummarizedExperiment)
df <- read.csv("C:/Users/guypw/OneDrive/Documents/flowCytometryDataAnalysisAndClusteringBCells/data/bCells/dataPPOutput/diffusionMapDf.csv")
