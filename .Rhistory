"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
directoryName <- bCellsDirectoryName
columnNames <- bCellsColumnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
convertToDataFrame(directoryName, columnNames, test)
loadlibraries()
convertToDataFrame(directoryName, columnNames, test)
directoryName
getwd()
setwd("..")
setwd("..")
getwd()
convertToDataFrame(directoryName, columnNames, test)
test <- TRUE
convertToDataFrame(directoryName, columnNames, test)
workingDirectory <- getwd()
clinicalData <- read.csv('data/metadata/metadata.csv')
getwd()
setwd("..")
setwd("..")
workingDirectory <- getwd()
workingDirectory
clinicalData <- read.csv('data/metadata/metadata.csv')
setwd(paste0("./data/", directoryName))
dirFCS <- paste0(getwd(), "/dataPPOutput")
pathST <- "X:/Users/guypw/OneDrive/Documents.txt"
read.flowdat <- function(dir,path_CSPLR_ST=""){
# Read:
filepaths <- list.files(path=dir,pattern = ".fcs", full.names=TRUE)
flowset <- read.flowSet(files=filepaths, transformation=FALSE,
truncate_max_range = FALSE)
# Transform to data frame:
x <- as.data.frame(exprs(as(flowset,'flowFrame')),stringsAsFactors=FALSE)
# Map column 'Original' to filename (in this case holding clusters of
# HSNE):
filenames <- gsub("[.fcs]","",list.files(path=dir,pattern = ".fcs",
full.names=FALSE))
names(filenames) <- sort(unique(x$Original))
x$fileName <- filenames[as.character(x$Original)]
# Remove column 'Original':
x <- x[,-which(colnames(x)=="Original")]
# Optionally remap Cytosplore sample tags to original filename:
if(file.exists(path_CSPLR_ST)){
# Read:
sampID <- gsub(
".fcs","",basename(sapply(strsplit(readLines(path_CSPLR_ST),": "),
function(x) x[1])))
names(sampID) <- sapply(
strsplit(readLines(path_CSPLR_ST),": "),function(x) x[2])
x$sampleID <- sampID[as.character(x$CSPLR_ST)]
}
return(x)
}
## Read fcs files
# In our example we will read the data which were clustered in Cytosplore
# (each fcs file is 1 cluster)
df <- read.flowdat(dir=dirFCS[1],path_CSPLR_ST = pathST)
df
gc()
if (test) {
df <- df[seq_len(nrow(df)/50),]
}
write.csv(df, 'dataPPOutput/rawDf.csv')
gc()
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
bCellsColumnNames
columnNames <- bCellsColumnNames
columnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
columnNames
columnNames <- c("GPR32...AF488.A", "IgD...PerCP.Cy5.5.A", "CD24...BV605.A", "CD27...BV650.A")
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
columnNames
columnNames
columnNames <- c("GPR32...AF488.A", "IgD...PerCP.Cy5.5.A", "CD24...BV605.A", "CD27...BV650.A")
columnNames
bCellsDirectoryName <- "bCells"
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
test <- TRUE
directoryName <- bCellsDirectoryName
columnNames <- bCellsColumnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
columnNames
columnNames
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
df <- df[,updatedColumnNames]
df
gc()
write.csv(df, 'dataPPOutput/columnsOfInterestDf.csv')
gc()
df <- merge(df, clinicalData, by.x = "fileName", by.y = "id")
df["caseControl"][df["caseControl"] == "Case"] <- 1
df["caseControl"][df["caseControl"] == "Control"] <- 0
df["fastSlow"][df["fastSlow"] == "Fast"] <- 1
df["fastSlow"][df["fastSlow"] == "Slow"] <- 0
df["fastSlow"][df["fastSlow"] == "N/A"] <- -1
gc()
write.csv(df, 'dataPPOutput/columnsOfInterestPlusClinicalDataDf.csv')
gc()
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
df <- merge(df, clinicalData, by.x = "fileName", by.y = "id")
df
clinicalData
df <- tryCatch({merge(df, clinicalData, by.x = "fileName", by.y = "Ã¯..id")},
error=function(x) {
merge(df, clinicalData, by.x = "fileName", by.y = "id")
})
df
df["caseControl"][df["caseControl"] == "Case"] <- 1
df["caseControl"][df["caseControl"] == "Control"] <- 0
df["fastSlow"][df["fastSlow"] == "Fast"] <- 1
df["fastSlow"][df["fastSlow"] == "Slow"] <- 0
df["fastSlow"][df["fastSlow"] == "N/A"] <- -1
gc()
write.csv(df, 'dataPPOutput/columnsOfInterestPlusClinicalDataDf.csv')
gc()
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
getwd()
setwd(paste0("./data/", directoryName))
write.csv(df, 'dataPPOutput/columnsOfInterestPlusClinicalDataDf.csv')
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
library(readxl)
url <- "http://imlspenticton.uzh.ch/robinson_lab/cytofWorkflow"
md <- "PBMC8_metadata.xlsx"
download.file(file.path(url, md), destfile = md, mode = "wb")
md <- read_excel(md)
head(data.frame(md))
library(HDCytoData)
fs <- Bodenmiller_BCR_XL_flowSet()
panel <- "PBMC8_panel_v3.xlsx"
download.file(file.path(url, panel), destfile = panel, mode = "wb")
panel <- read_excel(panel)
head(data.frame(panel))
# spot check that all panel columns are in the flowSet object
all(panel$fcs_colname %in% colnames(fs))
# specify levels for conditions & sample IDs to assure desired ordering
md$condition <- factor(md$condition, levels = c("Ref", "BCRXL"))
md$sample_id <- factor(md$sample_id,
levels = md$sample_id[order(md$condition)])
# construct SingleCellExperiment
sce <- prepData(fs, panel, md, features = panel$fcs_colname)
library(flowCore)
# specify levels for conditions & sample IDs to assure desired ordering
md$condition <- factor(md$condition, levels = c("Ref", "BCRXL"))
md$sample_id <- factor(md$sample_id,
levels = md$sample_id[order(md$condition)])
# construct SingleCellExperiment
sce <- prepData(fs, panel, md, features = panel$fcs_colname)
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
BiocManager::install("HDCytoData")
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
#BiocManager::install("HDCytoData")
#BiocManager::install("CATALYST")
## Load the example dataset
suppressPackageStartupMessages(library(HDCytoData))
# Download and load 'Bodenmiller_BCR_XL' dataset in 'flowSet' format
d_flowSet <- Bodenmiller_BCR_XL_flowSet()
suppressPackageStartupMessages(library(flowCore))
# check data format
d_flowSet
# sample names
pData(d_flowSet)
# dimensions
dim(exprs(d_flowSet[[1]]))
# expression values
exprs(d_flowSet[[1]])[1:6, 1:5]
## Set up meta-data
# Meta-data: experiment information
# check sample order
filenames <- as.character(pData(d_flowSet)$name)
# sample information
sample_id <- gsub("^PBMC8_30min_", "", gsub("\\.fcs$", "", filenames))
group_id <- factor(
gsub("^patient[0-9]+_", "", sample_id), levels = c("Reference", "BCR-XL")
)
patient_id <- factor(gsub("_.*$", "", sample_id))
experiment_info <- data.frame(
group_id, patient_id, sample_id, stringsAsFactors = FALSE
)
experiment_info
# Meta-data: marker information
# source: Bruggner et al. (2014), Table 1
# column indices of all markers, lineage markers, and functional markers
cols_markers <- c(3:4, 7:9, 11:19, 21:22, 24:26, 28:31, 33)
cols_lineage <- c(3:4, 9, 11, 12, 14, 21, 29, 31, 33)
cols_func <- setdiff(cols_markers, cols_lineage)
# channel and marker names
channel_name <- colnames(d_flowSet)
marker_name <- gsub("\\(.*$", "", channel_name)
# marker classes
# note: using lineage markers for 'cell type', and functional markers for
# 'cell state'
marker_class <- rep("none", ncol(d_flowSet[[1]]))
marker_class[cols_lineage] <- "type"
marker_class[cols_func] <- "state"
marker_class <- factor(marker_class, levels = c("type", "state", "none"))
marker_info <- data.frame(
channel_name, marker_name, marker_class, stringsAsFactors = FALSE
)
marker_info
## Set up design matrix (or model formula)
suppressPackageStartupMessages(library(diffcyt))
# Create design matrix
# note: selecting columns containing group IDs and patient IDs (for an
# unpaired dataset, only group IDs would be included)
design <- createDesignMatrix(
experiment_info, cols_design = c("group_id", "patient_id")
)
## Set up contrast matrix
# Create contrast matrix
contrast <- createContrast(c(0, 1, rep(0, 7)))
# check
nrow(contrast) == ncol(design)
data.frame(parameters = colnames(design), contrast)
## Differential testing (Option 3: Individual functions)
# Prepare data
d_se <- prepareData(d_flowSet, experiment_info, marker_info)
# Transform data
d_se <- transformData(d_se)
# Generate clusters
# note: include random seed for reproducible clustering
d_se <- generateClusters(d_se, seed_clustering = 123)
# Calculate cluster cell counts
d_counts <- calcCounts(d_se)
# Calculate cluster medians
d_medians <- calcMedians(d_se)
# Test for differential abundance (DA) of cell populations
# Test for differential abundance (DA) of clusters
res_DA <- testDA_edgeR(d_counts, design, contrast)
# display table of results for top DA clusters
topTable(res_DA, format_vals = TRUE)
# calculate number of significant detected DA clusters at 10% false discovery
# rate (FDR)
threshold <- 0.1
table(topTable(res_DA, all = TRUE)$p_adj <= threshold)
# Test for differential states (DS) within cell populations
## UPDATE WITH markers_to_test PARAMETER
# Test for differential states (DS) within clusters
res_DS <- testDS_limma(d_counts, d_medians, design, contrast, plot = FALSE)
# display table of results for top DS cluster-marker combinations
topTable(res_DS, format_vals = TRUE)
# calculate number of significant detected DS cluster-marker combinations at
# 10% false discovery rate (FDR)
threshold <- 0.1
table(topTable(res_DS, all = TRUE)$p_adj <= threshold)
## Differential testing (Option 1)
# Test for differential abundance (DA) of clusters
# note: using default method 'diffcyt-DA-edgeR' and default parameters
# note: include random seed for reproducible clustering
out_DA <- diffcyt(
d_input = d_flowSet,
experiment_info = experiment_info,
marker_info = marker_info,
design = design,
contrast = contrast,
analysis_type = "DA",
seed_clustering = 123
)
out_DA <- diffcyt(
d_input = d_flowSet,
experiment_info = experiment_info,
marker_info = marker_info,
design = design,
contrast = contrast,
analysis_type = "DA",
seed_clustering = 123
)
# display table of results for top DA clusters
topTable(out_DA, format_vals = TRUE)
# calculate number of significant detected DA clusters at 10% false discovery
# rate (FDR)
threshold <- 0.1
res_DA_all <- topTable(out_DA, all = TRUE)
table(res_DA_all$p_adj <= threshold)
# Test for differential states (DS) within clusters
# note: using default method 'diffcyt-DS-limma' and default parameters
# note: include random seed for reproducible clustering
out_DS <- diffcyt(
d_input = d_flowSet,
experiment_info = experiment_info,
marker_info = marker_info,
design = design,
contrast = contrast,
analysis_type = "DS",
seed_clustering = 123,
plot = FALSE
)
# calculate number of significant detected DS cluster-marker combinations at
# 10% false discovery rate (FDR)
threshold <- 0.1
res_DS_all <- topTable(out_DS, all = TRUE)
table(res_DS_all$p_adj <= threshold)
out_DS
# Output object from 'diffcyt()' wrapper function
names(out_DA)
names(out_DA)
dim(out_DA$d_se)
rowData(out_DA$d_se)
names(out_DA)
dim(out_DA$d_se)
rowData(out_DA$d_se)
str(assay(out_DA$d_se))
head(assay(out_DA$d_se), 2)
# Extract cell-level table for export as .fcs file
# note: including group IDs, patient IDs, sample IDs, and cluster labels for
# each cell
# note: table must be a numeric matrix (to save as .fcs file)
d_fcs <- assay(out_DA$d_se)
class(d_fcs)
# Heatmap for top detected DA clusters
# note: use optional argument 'sample_order' to group samples by condition
sample_order <- c(seq(2, 16, by = 2), seq(1, 16, by = 2))
plotHeatmap(out_DA, analysis_type = "DA", sample_order = sample_order)
# Heatmap for top detected DA clusters (alternative code using 'CATALYST')
suppressPackageStartupMessages(library(CATALYST))
plotDiffHeatmap(out_DA$d_se, out_DA$res)
# Heatmap for top detected DS cluster-marker combinations
# note: use optional argument 'sample_order' to group samples by condition
sample_order <- c(seq(2, 16, by = 2), seq(1, 16, by = 2))
plotHeatmap(out_DS, analysis_type = "DS", sample_order = sample_order)
d_counts
design
contrast
library(SummarizedExperiment)
df <- read.csv("C:/Users/guypw/OneDrive/Documents/flowCytometryDataAnalysisAndClusteringBCells/data/bCells/dataPPOutput/diffusionMapDf.csv")
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
#BiocManager::install("HDCytoData")
#BiocManager::install("CATALYST")
## Load the example dataset
suppressPackageStartupMessages(library(HDCytoData))
# Download and load 'Bodenmiller_BCR_XL' dataset in 'flowSet' format
d_flowSet <- Bodenmiller_BCR_XL_flowSet()
suppressPackageStartupMessages(library(flowCore))
# check data format
d_flowSet
# sample names
pData(d_flowSet)
# dimensions
dim(exprs(d_flowSet[[1]]))
# expression values
exprs(d_flowSet[[1]])[1:6, 1:5]
## Set up meta-data
# Meta-data: experiment information
# check sample order
filenames <- as.character(pData(d_flowSet)$name)
# sample information
sample_id <- gsub("^PBMC8_30min_", "", gsub("//.fcs$", "", filenames))
group_id <- factor(
gsub("^patient[0-9]+_", "", sample_id), levels = c("Reference", "BCR-XL")
)
patient_id <- factor(gsub("_.*$", "", sample_id))
experiment_info <- data.frame(
group_id, patient_id, sample_id, stringsAsFactors = FALSE
)
experiment_info
# Meta-data: marker information
# source: Bruggner et al. (2014), Table 1
# column indices of all markers, lineage markers, and functional markers
cols_markers <- c(3:4, 7:9, 11:19, 21:22, 24:26, 28:31, 33)
cols_lineage <- c(3:4, 9, 11, 12, 14, 21, 29, 31, 33)
cols_func <- setdiff(cols_markers, cols_lineage)
# channel and marker names
channel_name <- colnames(d_flowSet)
marker_name <- gsub("//.*$", "", channel_name)
# marker classes
# note: using lineage markers for 'cell type', and functional markers for
# 'cell state'
marker_class <- rep("none", ncol(d_flowSet[[1]]))
marker_class[cols_lineage] <- "type"
marker_class[cols_func] <- "state"
marker_class <- factor(marker_class, levels = c("type", "state", "none"))
marker_info <- data.frame(
channel_name, marker_name, marker_class, stringsAsFactors = FALSE
)
marker_info
## Set up design matrix (or model formula)
suppressPackageStartupMessages(library(diffcyt))
# Create design matrix
# note: selecting columns containing group IDs and patient IDs (for an
# unpaired dataset, only group IDs would be included)
design <- createDesignMatrix(
experiment_info, cols_design = c("group_id", "patient_id")
)
## Set up contrast matrix
# Create contrast matrix
contrast <- createContrast(c(0, 1, rep(0, 7)))
# check
nrow(contrast) == ncol(design)
data.frame(parameters = colnames(design), contrast)
## Differential testing (Option 3: Individual functions)
# Prepare data
d_se <- prepareData(d_flowSet, experiment_info, marker_info)
# Transform data
d_se <- transformData(d_se)
# Generate clusters
# note: include random seed for reproducible clustering
d_se <- generateClusters(d_se, seed_clustering = 123)
assay(d_se)
head(colData(d_se),10)
rowData(d_se)
metadata(d_se)
# Calculate cluster cell counts
d_counts <- calcCounts(d_se)
assay(d_counts)
head(assay(d_counts))
head(assay(d_se))
head(colData(d_se))
head(rowData(d_se))
head(assay(d_se))
head(rowData(d_se))
head(assay(d_se))
head(colData(d_se))
head(rowData(d_se))
metadata(d_se)
head(assay(d_se))
head(rowData(d_se))
rowData(d_se)[,"group_id"]
unique(rowData(d_se)[,"group_id"])
head(colData(d_se))
colData(d_se)
head(colData(d_se),20)
experiment_info
marker_info
d_flowSet
marker_info
# For a complete workflow example demonstrating each step in the 'diffcyt' pipeline,
# see the package vignette.
# Function to create random data (one sample)
d_random <- function(n = 20000, mean = 0, sd = 1, ncol = 20, cofactor = 5) {
d <- sinh(matrix(rnorm(n, mean, sd), ncol = ncol)) * cofactor
colnames(d) <- paste0("marker", sprintf("%02d", 1:ncol))
d
}
# Create random data (without differential signal)
set.seed(123)
d_input <- list(
sample1 = d_random(),
sample2 = d_random(),
sample3 = d_random(),
sample4 = d_random()
)
experiment_info <- data.frame(
sample_id = factor(paste0("sample", 1:4)),
group_id = factor(c("group1", "group1", "group2", "group2")),
stringsAsFactors = FALSE
)
marker_info <- data.frame(
channel_name = paste0("channel", sprintf("%03d", 1:20)),
marker_name = paste0("marker", sprintf("%02d", 1:20)),
marker_class = factor(c(rep("type", 10), rep("state", 10)),
levels = c("type", "state", "none")),
stringsAsFactors = FALSE
)
# Prepare data
d_se <- prepareData(d_input, experiment_info, marker_info)
# Transform data
d_se <- transformData(d_se)
# Generate clusters
d_se <- generateClusters(d_se)
# Calculate counts
d_counts <- calcCounts(d_se)
d_se
colData(d_se)
experiment_info
experiment_info <- data.frame(
group_id, patient_id, sample_id, stringsAsFactors = FALSE
)
experiment_info
design
experiment_info
design <- createDesignMatrix(
experiment_info, cols_design = c("group_id", "patient_id")
)
experiment_info
is.factor(experiment_info)
is.factor(experiment_info[,"group_id"])
group_id
contrast
data.frame(parameters = colnames(design), contrast)
