# Pre-Normalized Plots
flowViz.par.set(theme =  trellis.par.get(), reset = TRUE)
dir.create("figures", showWarnings = FALSE)
figureDirectory <- paste0(getwd(),"/figures/")
gc()
jpeg(file = paste0(figureDirectory,"densityPlotGPR32.jpeg"))
densityplot(~GPR32.AF488.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotKLRG1.jpeg"))
densityplot(~KLRG1.PE.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotCD4.jpeg"))
densityplot(~CD4.PE.CF594.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotCD8PerCP.jpeg"))
densityplot(~CD8.PerCP.Cy5.5.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotCCR7.jpeg"))
densityplot(~CCR7.PE.Cy7.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotFPRL1.jpeg"))
densityplot(~FPRL1.AF647.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotZombie.jpeg"))
densityplot(~Zombie.NIR.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotCD27.jpeg"))
densityplot(~CD27.BV421.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotx.jpeg"))
densityplot(~x.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotPacific.jpeg"))
densityplot(~Pacific.Orange.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotCD45RA.jpeg"))
densityplot(~CD45RA.BV605.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotCD8BV650.jpeg"))
densityplot(~CD8.BV650.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"densityPlotCD28.jpeg"))
densityplot(~CD28.BV785.A, dfs_fs_t_auto, main="auto")
dev.off()
gc()
# Normalized Plots
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotGPR32.jpeg"))
densityplot(~GPR32.AF488.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotKLRG1.jpeg"))
densityplot(~KLRG1.PE.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotCD4.jpeg"))
densityplot(~CD4.PE.CF594.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotCD8PerCP.jpeg"))
densityplot(~CD8.PerCP.Cy5.5.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotCCR7.jpeg"))
densityplot(~CCR7.PE.Cy7.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotFPRL1.jpeg"))
densityplot(~FPRL1.AF647.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotZombie.jpeg"))
densityplot(~Zombie.NIR.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotCD27.jpeg"))
densityplot(~CD27.BV421.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotx.jpeg"))
densityplot(~x.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotPacific.jpeg"))
densityplot(~Pacific.Orange.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotCD45RA.jpeg"))
densityplot(~CD45RA.BV605.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotCD8BV650.jpeg"))
densityplot(~CD8.BV650.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"normalisedDensityPlotCD28.jpeg"))
densityplot(~CD28.BV785.A, dfs_fs_t_auto_normfda, main="auto")
dev.off()
gc()
getwd()
setwd("..")
getwd()
library(R.utils)
workingDirectory <- getwd()
dataDirectorys <- c("/data/bCells","/data/monocytes",
"/data/senescence","/data/tCells")
for (directory in dataDirectorys) {
try(setwd(paste0(workingDirectory,dataDirectorys)))
print(getwd())
gzFilenames <- list.files(pattern = ".gz")
#for (gzFilename in gzFilenames) {
#  gunzip(gzFilename)
#}
}
for (directory in dataDirectorys) {
try(setwd(paste0(workingDirectory,directory)))
print(getwd())
gzFilenames <- list.files(pattern = ".gz")
#for (gzFilename in gzFilenames) {
#  gunzip(gzFilename)
#}
}
getwd()
setwd("..")
setwd("..")
getwd()
try(source("R/04_functions.R"))
try(source("R/04_functions.R"))
loadlibraries()
directoryName <- "bcells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
getwd()
setwd("..")
setwd("..")
getwd()
library(R.utils)
workingDirectory <- getwd()
dataDirectorys <- c("/data/bCells","/data/monocytes",
"/data/senescence","/data/tCells")
for (directory in dataDirectorys) {
try(setwd(paste0(workingDirectory,directory)))
gzFilenames <- list.files(pattern = ".gz")
for (gzFilename in gzFilenames) {
gunzip(gzFilename)
}
}
setwd(workingDirectory)
loadlibraries <- function() {
library(flowCore)
library(Biobase)
library(dplyr)
library(flowVS)
library(flowStats)
library(R.utils)
library(flowCore)
library(FlowSOM)
library(SingleCellExperiment)
library(dplyr)
library(ggplot2)
library(scales)
library(reshape2)
library(RColorBrewer)
library(destiny)
library(uwot)
library(slingshot)
library(cytofkit2)
library(ggrepel)
library(tidyverse)
}
try(source("R/04_functions.R"))
loadlibraries()
directoryName <- "bcells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
getwd()
setwd("..")
setwd("..")
getwd()
try(source("R/04_functions.R"))
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
dev.off()
try(source("R/04_functions.R"))
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
getwd()
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
getwd()
setwd("..")
setwd("..")
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
getwd()
setwd("..")
setwd("..")
gc()
gc()
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
workingDirectory <- getwd()
setwd(paste0("./data/", directoryName))
rm(list = ls())
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
if (test) {
filenames <- filenames[1:2]
}
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
workingDirectory <- getwd()
setwd(paste0("./data/", directoryName))
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
if (test) {
filenames <- filenames[1:2]
}
filenames
df <- read.csv(filenames[1], sep=",", header=TRUE)
rm(df)
read.flow_csv <- function(pathIN){
raw <- read.csv(pathIN, sep=",", header=TRUE, stringsAsFactors=FALSE)
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if(any(duplicated(raw))){
cat(paste0("=== Duplicate entries removed in [",pathIN,"]: ",length(IND)," ===\n"))
print(head(raw[IND,]))
cat("----\n")
}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames,read.flow_csv,simplify=FALSE)
gc()
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat){
# Compute required metadata - column names with description - ranges, min, and max settings
meta <- data.frame(name=dimnames(dat)[[2]],
desc=paste(dimnames(dat)[[2]]),
range =(apply(apply(dat,2,range),2,diff)),
minRange = apply(dat,2,min),
maxRange = apply(dat,2,max))
# Create flowframe
flowframef <- new("flowFrame",exprs=as.matrix(dat),parameters=AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs,function(x) csv_2_ff(x),simplify=FALSE)
gc()
rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff,"flowSet")
gc()
rm(dfs_ff)
###############################
####### TRANSFORMATION ########
###############################
## Each parameter of interest needs to be arcsinh transformed with an individual cofactor. The cofactor can be deduced from the size of the linear region around zero on a biexponential scale, as plotted in a histogram (in conventional gating software).
# Choose manual transformation or automated transformation (we prefer manual)
# Define parameters and cofactors for transformations:
gc()
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
gc()
df <- read.csv(filenames[1])
colnames(df)
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
filenames
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
test <- TRUE
workingDirectory <- getwd()
setwd(paste0("./data/", directoryName))
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
if (test) {
filenames <- filenames[1:2]
}
df <- read.csv(filenames[1])
colnames(df)
## Defining a function to read a flow cytrometry file in csv format:
# Each row is a cell, each column is a parameter. In our experience, the flow cytometers sometimes output duplicate entries (listing the same cell twice), we remove these and report.
# Please check how your csv file is separated and adjust the sep argument in the function if necessary. In this example we import a semicolon separated file.
read.flow_csv <- function(pathIN){
raw <- read.csv(pathIN, sep=",", header=TRUE, stringsAsFactors=FALSE)
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if(any(duplicated(raw))){
cat(paste0("=== Duplicate entries removed in [",pathIN,"]: ",length(IND)," ===\n"))
print(head(raw[IND,]))
cat("----\n")
}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames,read.flow_csv,simplify=FALSE)
gc()
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat){
# Compute required metadata - column names with description - ranges, min, and max settings
meta <- data.frame(name=dimnames(dat)[[2]],
desc=paste(dimnames(dat)[[2]]),
range =(apply(apply(dat,2,range),2,diff)),
minRange = apply(dat,2,min),
maxRange = apply(dat,2,max))
# Create flowframe
flowframef <- new("flowFrame",exprs=as.matrix(dat),parameters=AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs,function(x) csv_2_ff(x),simplify=FALSE)
gc()
rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff,"flowSet")
gc()
rm(dfs_ff)
###############################
####### TRANSFORMATION ########
###############################
## Each parameter of interest needs to be arcsinh transformed with an individual cofactor. The cofactor can be deduced from the size of the linear region around zero on a biexponential scale, as plotted in a histogram (in conventional gating software).
# Choose manual transformation or automated transformation (we prefer manual)
# Define parameters and cofactors for transformations:
gc()
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
gc()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A")
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
test <- FALSE
preprocessing(directoryName,columnNames, test)
gc()
gc()
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
test <- FALSE
preprocessing(directoryName,columnNames, test)
library(R.utils)
workingDirectory <- getwd()
dataDirectorys <- c("/data/bCells"
#,"/data/monocytes",
#"/data/senescence","/data/tCells"
)
for (directory in dataDirectorys) {
try(setwd(paste0(workingDirectory,directory)))
gzFilenames <- list.files(pattern = ".gz")
for (gzFilename in gzFilenames) {
gunzip(gzFilename)
}
}
setwd(workingDirectory)
getwd()
library(R.utils)
workingDirectory <- getwd()
dataDirectorys <- c("/data/bCells","/data/monocytes",
"/data/senescence","/data/tCells")
for (directory in dataDirectorys) {
try(setwd(paste0(workingDirectory,directory)))
print(getwd())
filenames <- list.files(pattern = ".csv")
for (filename in filenames) {
gzip(filename)
}
}
setwd(workingDirectory)
