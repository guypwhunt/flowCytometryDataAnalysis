}
# rewrite to flowframe
dfs_ff = sapply(dfs,function(x) csv_2_ff(x),simplify=FALSE)
gc()
rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff,"flowSet")
gc()
rm(dfs_ff)
gc()
columnNames <- columnNames[c(13:(length(columnNames)-2))]
gc()
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
gc()
dev.off()
gc()
columnNames
automatedcofactors
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
library(flowCore)
library(Biobase)
library(dplyr)
library(flowVS)
library(flowStats)
library(R.utils)
###############################
##### LOAD PREPARED DATA ######
###############################
## Save the the compensated events in the gate of interest per individual sample as a csv file (for FlowJo users: select scale values).
# Set working directory:
setwd("./flowCytometryData")
rm(list = ls())
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
filenames
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
# Verify:
filenames
columnNames <- c()
for (filename in filenames) {
df <- read.csv(filename, sep=",", header=TRUE)
print(filename)
print(identical(colnames(df), columnNames))
columnNames <- colnames(df)
}
## Defining a function to read a flow cytrometry file in csv format:
# Each row is a cell, each column is a parameter. In our experience, the flow cytometers sometimes output duplicate entries (listing the same cell twice), we remove these and report.
# Please check how your csv file is separated and adjust the sep argument in the function if necessary. In this example we import a semicolon separated file.
read.flow_csv <- function(pathIN){
raw <- read.csv(pathIN, sep=",", header=TRUE, stringsAsFactors=FALSE)
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if(any(duplicated(raw))){
cat(paste0("=== Duplicate entries removed in [",pathIN,"]: ",length(IND)," ===\n"))
print(head(raw[IND,]))
cat("----\n")
}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames,read.flow_csv,simplify=FALSE)
gc()
filenames <- list.files(pattern = ".csv")
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat){
# Compute required metadata - column names with description - ranges, min, and max settings
meta <- data.frame(name=dimnames(dat)[[2]],
desc=paste(dimnames(dat)[[2]]),
range =(apply(apply(dat,2,range),2,diff)),
minRange = apply(dat,2,min),
maxRange = apply(dat,2,max))
# Create flowframe
flowframef <- new("flowFrame",exprs=as.matrix(dat),parameters=AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs,function(x) csv_2_ff(x),simplify=FALSE)
gc()
rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff,"flowSet")
gc()
rm(dfs_ff)
###############################
####### TRANSFORMATION ########
###############################
## Each parameter of interest needs to be arcsinh transformed with an individual cofactor. The cofactor can be deduced from the size of the linear region around zero on a biexponential scale, as plotted in a histogram (in conventional gating software).
# Choose manual transformation or automated transformation (we prefer manual)
# Define parameters and cofactors for transformations:
#manualcofactors <- c(FSC.A=14000,SSC.A=24500,GPR32...AF488.A=170,FoxP3.PE.A=430,CD19...PE.CF595.A=1350,IgD...PerCP.Cy5.5.A=2.75,IFNg.PE.Cy7.A=24,FPRL1...AF647.A=2650,Zombie.NIR.A=1390,IL.17...BV421.A=115,
#                     CD24...BV605.A=1900,CD27...BV650.A=6.5)
#dfs_fs_t_manual <- transFlowVS(dfs_fs, channels=names(manualcofactors), cofactor=manualcofactors)
gc()
columnNames <- columnNames[c(13:(length(columnNames)-2))]
gc()
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
gc()
dfs_fs_t_auto <- transFlowVS(dfs_fs, channels=columnNames, cofactor=automatedcofactors)
gc()
rm(dfs_fs)
rm(automatedcofactors)
gc()
dfs_fs_t_auto_normfda <- warpSet(dfs_fs_t_auto, stains=c('FSC.A','SSC.A','GPR32...AF488.A','FoxP3.PE.A','CD19...PE.CF595.A','IgD...PerCP.Cy5.5.A', 'FPRL1...AF647.A', 'Zombie.NIR.A', 'IL.17...BV421.A', 'CD24...BV605.A', 'CD27...BV650.A'))
gc()
gc()
dir.create("dataPPOutput", showWarnings = FALSE)
gc()
#Save flowframes wihtin flowset as fcs files using the flowCore package
write.flowSet(dfs_fs_t_auto_normfda, outdir='dataPPOutput', filename = paste0(gsub(".csv", ".fcs", sampleNames(dfs_fs_t_auto_normfda))))
gc()
rm(df)
gc()
gc()
dfs_fs_t_auto_normfda <- warpSet(dfs_fs_t_auto, stains=c('FSC.A','SSC.A','GPR32...AF488.A','FoxP3.PE.A','CD19...PE.CF595.A','IgD...PerCP.Cy5.5.A', 'FPRL1...AF647.A', 'Zombie.NIR.A', 'IL.17...BV421.A', 'CD24...BV605.A', 'CD27...BV650.A'))
gc()
write.flowSet(dfs_fs_t_auto_normfda, outdir='dataPPOutput', filename = paste0(gsub(".csv", ".fcs", sampleNames(dfs_fs_t_auto_normfda))))
save.image()
library(flowCore)
library(Biobase)
library(dplyr)
library(flowVS)
library(flowStats)
library(R.utils)
###############################
##### LOAD PREPARED DATA ######
###############################
## Save the the compensated events in the gate of interest per individual sample as a csv file (for FlowJo users: select scale values).
# Set working directory:
setwd("./flowCytometryData")
rm(list = ls())
load(".RData")
gc()
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
# Verify:
filenames
columnNames <- c()
for (filename in filenames) {
df <- read.csv(filename, sep=",", header=TRUE)
print(filename)
print(identical(colnames(df), columnNames))
columnNames <- colnames(df)
}
## Defining a function to read a flow cytrometry file in csv format:
# Each row is a cell, each column is a parameter. In our experience, the flow cytometers sometimes output duplicate entries (listing the same cell twice), we remove these and report.
# Please check how your csv file is separated and adjust the sep argument in the function if necessary. In this example we import a semicolon separated file.
read.flow_csv <- function(pathIN){
raw <- read.csv(pathIN, sep=",", header=TRUE, stringsAsFactors=FALSE)
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if(any(duplicated(raw))){
cat(paste0("=== Duplicate entries removed in [",pathIN,"]: ",length(IND)," ===\n"))
print(head(raw[IND,]))
cat("----\n")
}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames,read.flow_csv,simplify=FALSE)
gc()
filenames <- list.files(pattern = ".csv")
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat){
# Compute required metadata - column names with description - ranges, min, and max settings
meta <- data.frame(name=dimnames(dat)[[2]],
desc=paste(dimnames(dat)[[2]]),
range =(apply(apply(dat,2,range),2,diff)),
minRange = apply(dat,2,min),
maxRange = apply(dat,2,max))
# Create flowframe
flowframef <- new("flowFrame",exprs=as.matrix(dat),parameters=AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs,function(x) csv_2_ff(x),simplify=FALSE)
gc()
rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff,"flowSet")
gc()
rm(dfs_ff)
###############################
####### TRANSFORMATION ########
###############################
## Each parameter of interest needs to be arcsinh transformed with an individual cofactor. The cofactor can be deduced from the size of the linear region around zero on a biexponential scale, as plotted in a histogram (in conventional gating software).
# Choose manual transformation or automated transformation (we prefer manual)
# Define parameters and cofactors for transformations:
#manualcofactors <- c(FSC.A=14000,SSC.A=24500,GPR32...AF488.A=170,FoxP3.PE.A=430,CD19...PE.CF595.A=1350,IgD...PerCP.Cy5.5.A=2.75,IFNg.PE.Cy7.A=24,FPRL1...AF647.A=2650,Zombie.NIR.A=1390,IL.17...BV421.A=115,
#                     CD24...BV605.A=1900,CD27...BV650.A=6.5)
#dfs_fs_t_manual <- transFlowVS(dfs_fs, channels=names(manualcofactors), cofactor=manualcofactors)
gc()
columnNames <- columnNames[c(13:(length(columnNames)-2))]
gc()
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
gc()
#auto
dfs_fs_t_auto <- transFlowVS(dfs_fs, channels=columnNames, cofactor=automatedcofactors)
gc()
rm(dfs_fs)
rm(automatedcofactors)
##############################
######## NORMALIZATION #######
##############################
## To correct for technical inter-sample variation we apply normalization by fdaNorm (which automatically detects the number of peaks)
# We continue with the manual transformed dataset
# Select the markers which require normalization (based on the densityplots you generated above). Be aware that you don't remove biological variation!
gc()
dfs_fs_t_auto_normfda <- warpSet(dfs_fs_t_auto, stains=c('FSC.A','SSC.A','GPR32...AF488.A','FoxP3.PE.A','CD19...PE.CF595.A','IgD...PerCP.Cy5.5.A', 'FPRL1...AF647.A', 'Zombie.NIR.A', 'IL.17...BV421.A', 'CD24...BV605.A', 'CD27...BV650.A'))
gc()
##############################
####### EXPORT TO FCS ########
##############################
## The flowset (dfs_fs_t_auto_normfda) can be exported to individual fcs files
# Create an 'output' folder
gc()
dir.create("dataPPOutput", showWarnings = FALSE)
gc()
#Save flowframes wihtin flowset as fcs files using the flowCore package
write.flowSet(dfs_fs_t_auto_normfda, outdir='dataPPOutput', filename = paste0(gsub(".csv", ".fcs", sampleNames(dfs_fs_t_auto_normfda))))
gc()
library(flowCore)
library(FlowSOM)
library(SingleCellExperiment)
library(dplyr)
library(ggplot2)
library(scales)
library(reshape2)
library(RColorBrewer)
library(destiny)
library(uwot)
library(slingshot)
library(cytofkit2)
library(ggrepel)
############################
######## LOAD DATA #########
############################
### Load the (transformed, normalized, unclustered) FCS files from the 'CSV_to_transformed_normalized_FCS' script
### Or load fcs files which where clustered in Cytosplore (in this case each fcs file is 1 cluster)
try(setwd("./flowCytometryData"))
dir.create("clusteringOutput", showWarnings = FALSE)
## Provide the directory of the fcs files
dirFCS <- paste0(getwd(), "/dataPPOutput")
## Optional: when loading clustered fcs files from cytosplore, provide the directory of the text file 'CSPLR_ST.txt'. Cytosplore exports this file upon running the HSNE. This file contains the decoding of the sample numbers.
pathST <- "X:/Users/guypw/OneDrive/Documents/flowCytometryDataAnalysis/HSNE_clusters_CD4/CSPLR_ST.txt"
## Defining a function to read multiple fcs files from a directory 'dir' into a single data.frame:
# NB: The column in the output named 'fileName' tracks the original file where each cell came from.
# Optionally perform remapping of column 'CSPLR_ST' holding cytosplore sample numbers to actual names:
read.flowdat <- function(dir,path_CSPLR_ST=""){
# Read:
filepaths <- list.files(path=dir,pattern = ".fcs", full.names=TRUE)
flowset <- read.flowSet(files=filepaths, transformation=FALSE, truncate_max_range = FALSE)
# Transform to data frame:
x <- as.data.frame(exprs(as(flowset,'flowFrame')),stringsAsFactors=FALSE)
# Map column 'Original' to filename (in this case holding clusters of HSNE):
filenames <- gsub("[.fcs]","",list.files(path=dir,pattern = ".fcs", full.names=FALSE))
names(filenames) <- sort(unique(x$Original))
x$fileName <- filenames[as.character(x$Original)]
# Remove column 'Original':
x <- x[,-which(colnames(x)=="Original")]
# Optionally remap Cytosplore sample tags to original filename:
if(file.exists(path_CSPLR_ST)){
# Read:
sampID <- gsub(".fcs","",basename(sapply(strsplit(readLines(path_CSPLR_ST),": "),function(x) x[1])))
names(sampID) <- sapply(strsplit(readLines(path_CSPLR_ST),": "),function(x) x[2])
x$sampleID <- sampID[as.character(x$CSPLR_ST)]
}
return(x)
}
## Read fcs files
# In our example we will read the data which were clustered in Cytosplore (each fcs file is 1 cluster)
df <- read.flowdat(dir=dirFCS[1],path_CSPLR_ST = pathST)
df <- read.flowdat(dir=dirFCS[1],path_CSPLR_ST = pathST)
write.csv(df, 'clusteringOutput/rawDf.csv')
gc()
# Optional: Set columname 'fileName' to clusters_HSNE:
#colnames(df)[which(colnames(df)=="fileName")] <- "clusters_HSNE"
## In our example we will start with the 275856 CD4 T cells
############################
######## CLUSTERING ########
############################
### We will discuss 3 clustering methods:
### A) HSNE-based Gaussian Mean Shift clustering
### B) flowSOM
### C) Phenograph
## Option A: HSNE-based Gaussian Mean Shift clustering
## With the software cytosplore HSNE-based GMS clustering can be performed. The clustering results with the expression values can be exported as fcs and loaded as described above
## Option B: generate clusters by FlowSOM
#check colnames, to determine which columns you need for the cluster calculation
colnames(df[,c(6, 11, 12)])
flowsom <- FlowSOM(input = dirFCS,
transform = FALSE,
scale = FALSE,
colsToUse = c(6, 11, 12), #provide the columns for the clustering
nClus = 6, #we choose 14, since we also generated 14 clusters by HSNE
seed = 100)
# Get metaclustering per cell
clusters_flowsom <- as.factor(flowsom$map$mapping[,1])
levels(clusters_flowsom) <- flowsom$metaclustering
#add flowsom clusters to dataframe
df <- cbind(df, clusters_flowsom)
write.csv(df, 'clusteringOutput/flowSomDf.csv')
rm(flowsom)
rm(clusters_flowsom)
gc()
gc()
phenograph <- Rphenograph(df[,c(6, 11, 12)], k=50)
clusters_phenograph <- as.factor(phenograph$membership)
#add phenograph clusters to expression data frame
df <- cbind(df, clusters_phenograph)
write.csv(df, 'clusteringOutput/phenographDf.csv')
gc()
phenograph <- Rphenograph(df[,c(6, 11, 12)], k=10)
phenograph <- Rphenograph(df[,c(6, 11, 12)], k=20)
clusters_phenograph <- as.factor(phenograph$membership)
phenograph <- Rphenograph(df[,c(6, 11, 12)], k=30)
gc()
phenograph <- Rphenograph(df[,c(6, 11, 12)], k=25)
clusters_phenograph <- as.factor(phenograph$membership)
gc()
phenograph <- Rphenograph(df[,c(6, 11, 12)], k=20)
clusters_phenograph <- as.factor(phenograph$membership)
df <- cbind(df, clusters_phenograph)
write.csv(df, 'clusteringOutput/phenographDf.csv')
rm(phenograph)
rm(clusters_phenograph)
gc()
colnames(df[,c(6, 11, 12)])
colnames(df)
colnames(df[,c(6, 11, 12)])
gc()
flowsom <- FlowSOM(input = dirFCS,
transform = FALSE,
scale = FALSE,
colsToUse = c(18, 23, 24), #provide the columns for the clustering
nClus = 6, #we choose 14, since we also generated 14 clusters by HSNE
seed = 100)
# Get metaclustering per cell
clusters_flowsom <- as.factor(flowsom$map$mapping[,1])
levels(clusters_flowsom) <- flowsom$metaclustering
#add flowsom clusters to dataframe
df <- cbind(df, clusters_flowsom)
write.csv(df, 'clusteringOutput/flowSomDf.csv')
rm(flowsom)
rm(clusters_flowsom)
gc()
## Option C: generate clusters by Phenograph (based on Louvain clustering)
# select the columns for the clustering calculation (usually the numbers are the same as used for the flowsom calculation)
#the higher the K nearest neighbours, the lower the number of clusters
phenograph <- Rphenograph(df[,c(18, 23, 24)], k=20)
clusters_phenograph <- as.factor(phenograph$membership)
df <- cbind(df, clusters_phenograph)
write.csv(df, 'clusteringOutput/phenographDf.csv')
rm(phenograph)
rm(clusters_phenograph)
gc()
gc()
dm <- DiffusionMap(df, vars = colnames(df[,c(18, 23, 24)]), k=100,
suppress_dpt = TRUE, verbose=TRUE)
gc()
dm <- DiffusionMap(df, vars = colnames(df[,c(18, 23, 24)]), k=50,
suppress_dpt = TRUE, verbose=TRUE)
library(flowCore)
library(FlowSOM)
library(SingleCellExperiment)
library(dplyr)
library(ggplot2)
library(scales)
library(reshape2)
library(RColorBrewer)
library(destiny)
library(uwot)
library(slingshot)
library(cytofkit2)
library(ggrepel)
viz.umap <- function(dat,param.name,limits=NULL){
ColVal <- dat[,param.name]
if(is.null(limits)){
Lim <- quantile(ColVal,probs=seq(0,1,0.01))[c(2,100)]
p <- ggplot(dat, aes(x = umap_1, y =umap_2)) +geom_point(aes(color = ColVal), size=0.1)+theme_classic()+scale_color_distiller(name=param.name, palette = "RdYlBu", limits=Lim, oob=squish)+theme_bw()+theme(panel.grid.major = element_blank(), panel.grid.minor=element_blank())+ggtitle(param.name)
} else {
p <- ggplot(dat, aes(x = umap_1, y = umap_2)) +geom_point(aes(color = ColVal), size=0.1)+theme_classic()+scale_color_distiller(name=param.name, palette = "RdYlBu", limits=c(limits[1],limits[2]), oob=squish)+theme_bw()+theme(panel.grid.major = element_blank(), panel.grid.minor=element_blank())+ggtitle(param.name)
}
p
}
df <- read.csv('clusteringOutput/umapDf.csv')
try(setwd("./flowCytometryData"))
df <- read.csv('clusteringOutput/umapDf.csv')
gc()
jpeg(file = paste0(figureDirectory,"umapIgD.jpeg"))
viz.umap(dat=df,param.name='IgD...PerCP.Cy5.5.H')
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umapCD24.jpeg"))
viz.umap(dat=df, param.name="CD24...BV605.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umapCD27.jpeg"))
viz.umap(dat=df, param.name="CD27...BV650.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umapGPR32.jpeg"))
viz.umap(dat=df, param.name="GPR32...AF488.A")
dev.off()
gc()
colnames(df)
colnames(df[15:26])
for (columnName in colnames(df[15:26])){
gc()
jpeg(file = paste0(figureDirectory,"umap", columnName,".jpeg"))
viz.umap(dat=df,param.name=columnName)
dev.off()
}
figureDirectory <- paste0(getwd(),"/Figures/")
gc()
for (columnName in colnames(df[15:26])){
gc()
jpeg(file = paste0(figureDirectory,"umap", columnName,".jpeg"))
viz.umap(dat=df,param.name=columnName)
dev.off()
}
columnName
jpeg(file = paste0(figureDirectory,"umap", columnName,".jpeg"))
viz.umap(dat=df,param.name=columnName)
dev.off()
colnames(df[15:26])
for (columnName in colnames(df[15:26])){
gc()
jpeg(file = paste0(figureDirectory,"umap", columnName,".jpeg"))
viz.umap(dat=df,param.name=columnName)
dev.off()
}
colnames(df[15:26])
gc()
jpeg(file = paste0(figureDirectory,"umap", "FSC.A",".jpeg"))
viz.umap(dat=df,param.name="FSC.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "SSC.A",".jpeg"))
viz.umap(dat=df,param.name="SSC.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "GPR32...AF488.A",".jpeg"))
viz.umap(dat=df,param.name="GPR32...AF488.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "FoxP3.PE.A",".jpeg"))
viz.umap(dat=df,param.name="FoxP3.PE.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "CD19...PE.CF595.A",".jpeg"))
viz.umap(dat=df,param.name="CD19...PE.CF595.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "IgD...PerCP.Cy5.5.A",".jpeg"))
viz.umap(dat=df,param.name="IgD...PerCP.Cy5.5.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "IFNg.PE.Cy7.A",".jpeg"))
viz.umap(dat=df,param.name="IFNg.PE.Cy7.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "FPRL1...AF647.A",".jpeg"))
viz.umap(dat=df,param.name="FPRL1...AF647.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "Zombie.NIR.A",".jpeg"))
viz.umap(dat=df,param.name="Zombie.NIR.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "IL.17...BV421.A",".jpeg"))
viz.umap(dat=df,param.name="IL.17...BV421.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "CD24...BV605.A",".jpeg"))
viz.umap(dat=df,param.name="CD24...BV605.A")
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umap", "CD27...BV650.A",".jpeg"))
viz.umap(dat=df,param.name="CD27...BV650.A")
dev.off()
gc()
df%>%group_by(fileName)
df%>%group_by(fileName)%>%select(umap_1, umap_2)
gc()
df%>%group_by(fileName)%>%select(umap_1, umap_2)
gc()
label_HSNE_umap <- df%>%group_by(fileName)%>%select(umap_1, umap_2)%>%summarize_all(mean)
label_flowsom_umap <- df%>%group_by(clusters_flowsom)%>%select(umap_1, umap_2)%>%summarize_all(mean)
label_pheno_umap <- df%>%group_by(clusters_phenograph)%>%select(umap_1, umap_2)%>%summarize_all(mean)
gc()
label_pheno_umap
label_flowsom_umap
label_HSNE_umap
gc()
jpeg(file = paste0(figureDirectory,"umapFileName.jpeg"))
ggplot(df, aes(x=umap_1, y=umap_2, color=as.factor(fileName)))+geom_point(size=0.1)+theme_bw()+theme(panel.grid.major = element_blank(), panel.grid.minor=element_blank())+geom_label_repel(aes(label=fileName), data=label_HSNE_umap)+guides(colour=FALSE)
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umapFlowsom.jpeg"))
ggplot(df, aes(x=umap_1, y=umap_2, color=as.factor(clusters_flowsom)))+geom_point(size=0.1)+theme_bw()+theme(panel.grid.major = element_blank(), panel.grid.minor=element_blank())+geom_label_repel(aes(label=clusters_flowsom), data=label_flowsom_umap)+guides(colour=FALSE)
dev.off()
gc()
jpeg(file = paste0(figureDirectory,"umapPhenograph.jpeg"))
ggplot(df, aes(x=umap_1, y=umap_2, color=as.factor(clusters_phenograph)))+geom_point(size=0.1)+theme_bw()+theme(panel.grid.major = element_blank(), panel.grid.minor=element_blank())+geom_label_repel(aes(label=clusters_phenograph), data=label_pheno_umap)+guides(colour=FALSE)
dev.off()
