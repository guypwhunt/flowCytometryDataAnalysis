show_annotation_name = F
)
fig <-
Heatmap(
summarisedDf,
rect_gp = gpar(col = "white", lwd = 2),
column_title_rot = 90,
column_names_rot = 90,
show_heatmap_legend = T,
row_names_side = 'left',
heatmap_legend_param = list(title = 'Z-score'),
left_annotation = left_anno,
row_split = row_order,
row_gap = unit(2, "mm"),
border = T,
row_title_rot = 0,
col = circlize::colorRamp2(seq(-4, 4, length = 3), c('#4575B4', 'white', '#D73027'))
)
print(fig)
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
try(source("R/01_functions.R"))
loadlibraries()
# variables
directoryName <- "bCells"
columnNames <-
c(
"CD27...BV650.A",
"CD24...BV605.A",
"IgD...PerCP.Cy5.5.A"
)
clusterNames <-
c(
"clusters_flowsom",
"clusters_phenograph",
"clusters_fast_pg",
"meta_clusters_flowsom"
)
markersOrCells <- c("CellPopulations", "Markers")
markerType <- "phenotypic"
#clusterNames <-c(clusterNames[4])
#clusterName <-clusterNames[4]
#markersOrCell <- markersOrCells[2]
clusterName <-clusterNames[4]
markersOrCell <- markersOrCells[2]
generateHeatmap(clusterName, directoryName, columnNames, markersOrCell, markerType)
par(“mar”)
par("mar")
try(source("R/01_functions.R"))
generateHeatmap(clusterName, directoryName, columnNames, markersOrCell, markerType)
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
try(source("R/01_functions.R"))
loadlibraries()
# variables
directoryName <- "bCells"
columnNames <-
c(
"CD27...BV650.A",
"CD24...BV605.A",
"IgD...PerCP.Cy5.5.A"
)
clusterNames <-
c(
"clusters_flowsom",
"clusters_phenograph",
"clusters_fast_pg",
"meta_clusters_flowsom"
)
markersOrCells <- c("CellPopulations", "Markers")
markerType <- "phenotypic"
clusterNames <-c(clusterNames[4], clusterNames[1])
clusterNames
for (markersOrCell in markersOrCells) {
for (clusterName in clusterNames) {
generateHeatmap(clusterName, directoryName, columnNames, markersOrCell, markerType)
}
}
markerType <- "functional"
columnNames <-
c(
"GPR32...AF488.A",
"FPRL1...AF647.A"
)
for (markersOrCell in markersOrCells) {
for (clusterName in clusterNames) {
generateHeatmap(clusterName, directoryName, columnNames, markersOrCell, markerType)
}
}
# clusterName <- "meta_clusters_flowsom"
# directoryName <- "bCells"
# columnNames <- c("IgD...PerCP.Cy5.5.A", "CD24...BV605.A", "CD27...BV650.A")
# markersOrCell <- "Markers"
if (clusterName == "meta_clusters_flowsom") {
df <-
read.csv(paste0(
"data/",
directoryName,
"/clusteringOutput/flowSomDf.csv"
))
} else if (clusterName == "clusters_flowsom") {
df <-
read.csv(paste0(
"data/",
directoryName,
"/clusteringOutput/flowSomDf.csv"
))
} else if (clusterName == "clusters_phenograph") {
df <-
read.csv(paste0(
"data/",
directoryName,
"/clusteringOutput/phenographDf.csv"
))
} else if (clusterName == "clusters_fast_pg") {
df <-
read.csv(paste0("data/", directoryName, "/clusteringOutput/fastPGDf.csv"))
}
cellPopulationMarkers <-
read.csv(
paste0(
"data/",
directoryName,
"/clusteringOutput/",
clusterName,
"CellPopulations.csv"
)
)
markerPopulationMarkers <-
read.csv(paste0(
"data/",
directoryName,
"/clusteringOutput/",
clusterName,
"Markers.csv"
))
colnames(markerPopulationMarkers)[ncol(markerPopulationMarkers)] <-
"marker_population"
populations <-
merge(cellPopulationMarkers, markerPopulationMarkers, by = clusterName)
populations <-
populations[, c(clusterName, "cell_population", "marker_population")]
df <- df[, c(columnNames, clusterName)]
colnames(df)[ncol(df)] <- "clusters"
df <- df[df[, "clusters"] %in% populations[, clusterName],]
populations <- populations[populations[, clusterName] %in% df[, "clusters"],]
metacluster_colours <-
as.vector(colortools::wheel('#ce302e', num = length(unique(df$clusters))))
dev.off()
dev.off()
names(metacluster_colours) <- unique(populations[, if (markersOrCell == "CellPopulations") {
"cell_population"
} else {
"marker_population"
}])
summarisedDf <- df %>%
group_by(clusters) %>%
summarise_all(median) %>%
remove_rownames() %>%
column_to_rownames('clusters') %>%
as.matrix() %>%
pheatmap:::scale_rows()
row_order <-
populations[match(rownames(summarisedDf), populations[, clusterName]),
if (markersOrCell == "CellPopulations") {
"cell_population"
} else {
"marker_population"
}]
left_anno <-
HeatmapAnnotation(
Celltype = row_order,
which = 'row',
col = list('Celltype' = metacluster_colours),
show_legend = F,
show_annotation_name = F
)
fig <-
Heatmap(
summarisedDf,
rect_gp = gpar(col = "white", lwd = 2),
column_title_rot = 90,
column_names_rot = 90,
show_heatmap_legend = T,
row_names_side = 'left',
heatmap_legend_param = list(title = 'Z-score'),
left_annotation = left_anno,
row_split = row_order,
row_gap = unit(2, "mm"),
border = T,
row_title_rot = 0,
col = circlize::colorRamp2(seq(-4, 4, length = 3), c('#4575B4', 'white', '#D73027'))
)
metacluster_colours
metacluster_colours <-
as.vector(colortools::wheel('#ce302e', num = length(unique(df$clusters))))
markersOrCell
names(metacluster_colours) <- unique(populations[, if (markersOrCell == "CellPopulations") {
"cell_population"
} else {
"marker_population"
}])
metacluster_colours
metacluster_colours <-
as.vector(colortools::wheel('#ce302e', num = length(unique(df$clusters))))
dev.off()
dev.off()
metacluster_colours
names(metacluster_colours) <- unique(populations[, if (markersOrCell == "CellPopulations") {
"cell_population"
} else {
"marker_population"
}])
names(metacluster_colours)
unique(df$clusters)
unique(populations$meta_clusters_flowsom)
names(metacluster_colours) <- populations[, if (markersOrCell == "CellPopulations") {
"cell_population"
} else {
"marker_population"
}]
metacluster_colours
metacluster_colours <-
as.vector(colortools::wheel('#ce302e', num = length(unique(df$clusters))))
metacluster_colours <-
as.vector(colortools::wheel('#ce302e', num = nrow(populations)))
dev.off()
metacluster_colours
names(metacluster_colours) <- populations[, if (markersOrCell == "CellPopulations") {
"cell_population"
} else {
"marker_population"
}]
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
try(source("R/01_functions.R"))
loadlibraries()
# variables
directoryName <- "bCells"
columnNames <-
c(
"CD27...BV650.A",
"CD24...BV605.A",
"IgD...PerCP.Cy5.5.A"
)
clusterNames <-
c(
"clusters_flowsom",
"clusters_phenograph",
"clusters_fast_pg",
"meta_clusters_flowsom"
)
markersOrCells <- c("CellPopulations", "Markers")
markerType <- "phenotypic"
clusterNames <-c(clusterNames[4], clusterNames[1])
gc()
for (markersOrCell in markersOrCells) {
for (clusterName in clusterNames) {
generateHeatmap(clusterName, directoryName, columnNames, markersOrCell, markerType)
}
}
markerType <- "Functional"
columnNames <-
c(
"GPR32...AF488.A",
"FPRL1...AF647.A"
)
for (markersOrCell in markersOrCells) {
for (clusterName in clusterNames) {
generateHeatmap(clusterName, directoryName, columnNames, markersOrCell, markerType)
}
}
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
try(source("R/01_functions.R"))
loadlibraries()
# variables
directoryName <- "bCells"
columnNames <-
c(
"CD27...BV650.A",
"CD24...BV605.A",
"IgD...PerCP.Cy5.5.A"
)
prettyColumnNames <-
c(
"CD27",
"CD24",
"IgD"
)
clusterNames <-
c(
"clusters_flowsom",
"clusters_phenograph",
"clusters_fast_pg",
"meta_clusters_flowsom"
)
markersOrCells <- c("CellPopulations", "Markers")
markerType <- "Phenotypic"
clusterName <- clusterNames[4]
markersOrCell <- markersOrCells[2]
# clusterName <- "meta_clusters_flowsom"
# directoryName <- "bCells"
# columnNames <- c("IgD...PerCP.Cy5.5.A", "CD24...BV605.A", "CD27...BV650.A")
# markersOrCell <- "Markers"
if (clusterName == "meta_clusters_flowsom") {
df <-
read.csv(paste0(
"data/",
directoryName,
"/clusteringOutput/flowSomDf.csv"
))
} else if (clusterName == "clusters_flowsom") {
df <-
read.csv(paste0(
"data/",
directoryName,
"/clusteringOutput/flowSomDf.csv"
))
} else if (clusterName == "clusters_phenograph") {
df <-
read.csv(paste0(
"data/",
directoryName,
"/clusteringOutput/phenographDf.csv"
))
} else if (clusterName == "clusters_fast_pg") {
df <-
read.csv(paste0("data/", directoryName, "/clusteringOutput/fastPGDf.csv"))
}
cellPopulationMarkers <-
read.csv(
paste0(
"data/",
directoryName,
"/clusteringOutput/",
clusterName,
"CellPopulations.csv"
)
)
markerPopulationMarkers <-
read.csv(paste0(
"data/",
directoryName,
"/clusteringOutput/",
clusterName,
"Markers.csv"
))
colnames(markerPopulationMarkers)[ncol(markerPopulationMarkers)] <-
"marker_population"
populations <-
merge(cellPopulationMarkers, markerPopulationMarkers, by = clusterName)
populations <-
populations[, c(clusterName, "cell_population", "marker_population")]
df <- df[, c(columnNames, clusterName)]
colnames(df)[1:length(columnNames)] <- prettyColumnNames
colnames(df)[ncol(df)] <- "clusters"
figureDirectory <- paste0("data/", directoryName, "/figures/")
df <- df[df[, "clusters"] %in% populations[, clusterName],]
populations <- populations[populations[, clusterName] %in% df[, "clusters"],]
metacluster_colours <-
as.vector(colortools::wheel('#ce302e', num = nrow(populations)))
dev.off()
names(metacluster_colours) <- populations[, if (markersOrCell == "CellPopulations") {
"cell_population"
} else {
"marker_population"
}]
summarisedDf <- df %>%
group_by(clusters) %>%
summarise_all(median) %>%
remove_rownames() %>%
column_to_rownames('clusters') %>%
as.matrix() %>%
pheatmap:::scale_rows()
row_order <-
populations[match(rownames(summarisedDf), populations[, clusterName]),
if (markersOrCell == "CellPopulations") {
"cell_population"
} else {
"marker_population"
}]
left_anno <-
HeatmapAnnotation(
Celltype = row_order,
which = 'row',
col = list('Celltype' = metacluster_colours),
show_legend = F,
show_annotation_name = F
)
fig <-
Heatmap(
summarisedDf,
rect_gp = gpar(col = "white", lwd = 2),
#column_title_rot = 90,
column_names_rot = 90,
show_heatmap_legend = T,
row_names_side = 'left',
heatmap_legend_param = list(title = 'Z-score'),
left_annotation = left_anno,
row_split = row_order,
row_gap = unit(2, "mm"),
border = T,
row_title_rot = 0,
col = circlize::colorRamp2(seq(-4, 4, length = 3), c('#4575B4', 'white', '#D73027'))
)
fig
Heatmap(
summarisedDf,
rect_gp = gpar(col = "white", lwd = 2),
column_title_rot = 0,
column_names_rot = 0,
show_heatmap_legend = T,
row_names_side = 'left',
heatmap_legend_param = list(title = 'Z-score'),
left_annotation = left_anno,
row_split = row_order,
row_gap = unit(2, "mm"),
border = T,
row_title_rot = 0,
col = circlize::colorRamp2(seq(-4, 4, length = 3), c('#4575B4', 'white', '#D73027'))
)
Heatmap(
summarisedDf,
rect_gp = gpar(col = "white", lwd = 2),
column_title_rot = 0,
column_names_rot = 45,
show_heatmap_legend = T,
row_names_side = 'left',
heatmap_legend_param = list(title = 'Z-score'),
left_annotation = left_anno,
row_split = row_order,
row_gap = unit(2, "mm"),
border = T,
row_title_rot = 0,
col = circlize::colorRamp2(seq(-4, 4, length = 3), c('#4575B4', 'white', '#D73027'))
)
Heatmap(
summarisedDf,
rect_gp = gpar(col = "white", lwd = 2),
column_title_rot = 45,
column_names_rot = 45,
show_heatmap_legend = T,
row_names_side = 'left',
heatmap_legend_param = list(title = 'Z-score'),
left_annotation = left_anno,
row_split = row_order,
row_gap = unit(2, "mm"),
border = T,
row_title_rot = 0,
col = circlize::colorRamp2(seq(-4, 4, length = 3), c('#4575B4', 'white', '#D73027'))
)
Heatmap(
summarisedDf,
rect_gp = gpar(col = "white", lwd = 2),
column_names_rot = 45,
show_heatmap_legend = T,
row_names_side = 'left',
heatmap_legend_param = list(title = 'Z-score'),
left_annotation = left_anno,
row_split = row_order,
row_gap = unit(2, "mm"),
border = T,
row_title_rot = 0,
col = circlize::colorRamp2(seq(-4, 4, length = 3), c('#4575B4', 'white', '#D73027'))
)
Heatmap(
summarisedDf,
rect_gp = gpar(col = "white", lwd = 2),
column_names_rot = 45,
show_heatmap_legend = T,
row_names_side = 'left',
heatmap_legend_param = list(title = 'Z-score'),
left_annotation = left_anno,
row_split = row_order,
row_gap = unit(2, "mm"),
border = T,
row_title_rot = 0,
col = circlize::colorRamp2(seq(-4, 4, length = 3), c('#4575B4', 'white', '#D73027'))
)
# https://bioconductor.org/packages/devel/bioc/vignettes/diffcyt/inst/doc/diffcyt_workflow.html
try(source("R/01_functions.R"))
loadlibraries()
# variables
directoryName <- "bCells"
columnNames <-
c(
"CD27...BV650.A",
"CD24...BV605.A",
"IgD...PerCP.Cy5.5.A"
)
prettyColumnNames <-
c(
"CD27",
"CD24",
"IgD"
)
clusterNames <-
c(
"clusters_flowsom",
"clusters_phenograph",
"clusters_fast_pg",
"meta_clusters_flowsom"
)
markersOrCells <- c("CellPopulations", "Markers")
markerType <- "Phenotypic"
#clusterNames <-c(clusterNames[4], clusterNames[1])
#clusterName <- clusterNames[4]
#markersOrCell <- markersOrCells[2]
clusterNames <- clusterNames[4]
markersOrCells <- markersOrCells[2]
for (markersOrCell in markersOrCells) {
for (clusterName in clusterNames) {
generateHeatmap(clusterName, directoryName, columnNames, markersOrCell, markerType, prettyColumnNames)
}
}
