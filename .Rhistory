plot(ninetyNiceScaledD)
plot(scaledD)
df[, col] <= min(quantilesDf) | df[, col] >= max(quantilesDf)
quantilesDf <- quantile(df[, col], c(.01, .99))
df[, col] <= min(quantilesDf) | df[, col] >= max(quantilesDf)
filteredDf <- df[df[, col] >= min(quantilesDf) | df[, col] <= max(quantilesDf),]
head(filteredDf)
ninetyNiceScaled <- (filteredDf[, col]- min(filteredDf[, col])) /(max(filteredDf[, col])-min(filteredDf[, col]))
ninetyNiceScaledD <- density(ninetyNiceScaled)
plot(ninetyNiceScaledD)
quantilesDf <- quantile(df[, col], c(.05, .95))
filteredDf <- df[df[, col] >= min(quantilesDf) | df[, col] <= max(quantilesDf),]
ninetyNiceScaled <- (filteredDf[, col]- min(filteredDf[, col])) /(max(filteredDf[, col])-min(filteredDf[, col]))
ninetyNiceScaledD <- density(ninetyNiceScaled)
plot(ninetyNiceScaledD)
quantilesDf <- quantile(df[, col], c(.20, .80))
filteredDf <- df[df[, col] >= min(quantilesDf) | df[, col] <= max(quantilesDf),]
ninetyNiceScaled <- (filteredDf[, col]- min(filteredDf[, col])) /(max(filteredDf[, col])-min(filteredDf[, col]))
ninetyNiceScaledD <- density(ninetyNiceScaled)
plot(ninetyNiceScaledD)
min(filteredDf[, col])
min(quantilesDf)
plot(scaledD)
quantilesDf <- quantile(df[, col], c(.01, .99))
filteredDf <- df[df[, col] >= min(quantilesDf) & df[, col] <= max(quantilesDf),]
ninetyNiceScaled <- (filteredDf[, col]- min(filteredDf[, col])) /(max(filteredDf[, col])-min(filteredDf[, col]))
ninetyNiceScaledD <- density(ninetyNiceScaled)
plot(ninetyNiceScaledD)
scaled <- scale(df[, col])
scaledD <- density(scaled)
plot(scaledD)
scaled <- scale(df)
scaled <- scale(df[,columnNames])
scaledD <- density(scaled[, col])
plot(scaledD)
scaledD <- density(scaled[, 2])
plot(scaledD)
scaledD <- density(scaled[, 1])
plot(scaledD)
scaledD <- density(scaled[, 3])
plot(scaledD)
y <- scale(df[,1])
max(y)
median(y)
min(y)
z <- scale(df[,2])
max(z)
median(z)
min(z)
df <- df[, columnNames]
for (col in columnNames) {
dfMax <- max(df[, col])
dfMin <- max(df[, col])
scaledColumn <- (df[, col] - dfMin) /(dfMax-dfMin)
df[, col] <- scaledColumn
}
max(df)
df
gc()
df <- read.csv("C:/Users/guypw/OneDrive/Documents/resolvinAnalysis/data/bCells/clusteringOutput/flowSomDf.csv")
colnames(df)
columnNames <- c("GPR32...AF488.A", "FPRL1...AF647.A", "IgD...PerCP.Cy5.5.A", "CD24...BV605.A","CD27...BV650.A")
df <- df[, columnNames]
df
col <- columnNames[1]
max(df[, col])
max(df[, col])
dfMax <- max(df[, col])
dfMin <- min(df[, col])
scaledColumn <- (df[, col] - dfMin) /(dfMax-dfMin)
scaledColumn
for (col in columnNames) {
dfMax <- max(df[, col])
dfMin <- min(df[, col])
scaledColumn <- (df[, col] - dfMin) /(dfMax-dfMin)
df[, col] <- scaledColumn
}
max(df)
min(df)
minMaxDF <- df
for (col in columnNames) {
dfMax <- max(minMaxDF[, col])
dfMin <- min(minMaxDF[, col])
scaledColumn <- (minMaxDF[, col] - dfMin) /(dfMax-dfMin)
d <- density(scaledColumn)
print(plot(d))
minMaxDF[, col] <- scaledColumn
}
df <- read.csv("C:/Users/guypw/OneDrive/Documents/resolvinAnalysis/data/bCells/clusteringOutput/flowSomDf.csv")
colnames(df)
columnNames <- c("GPR32...AF488.A", "FPRL1...AF647.A", "IgD...PerCP.Cy5.5.A", "CD24...BV605.A","CD27...BV650.A")
df <- df[, columnNames]
minMaxDF <- df
scaleDF <- df
for (col in columnNames) {
dfMax <- max(minMaxDF[, col])
dfMin <- min(minMaxDF[, col])
scaledColumn <- (minMaxDF[, col] - dfMin) /(dfMax-dfMin)
d <- density(scaledColumn)
print(plot(d))
minMaxDF[, col] <- scaledColumn
}
for (col in columnNames) {
dfMax <- max(scaleDF[, col])
dfMin <- min(scaleDF[, col])
scaledColumn <- scale(scaleDF[, col])
d <- density(scaledColumn)
print(plot(d))
scaleDF[, col] <- scaledColumn
}
scaledDF <- scale(df)
for (col in columnNames) {
scaledColumn <- scaledDF[, col]
d <- density(scaledColumn)
print(plot(d))
}
columnNames
try(source("R/01_functions.R"))
loadlibraries()
bCellsDirectoryName <- "bCells"
bCellsColumnNames <- c("GPR32...AF488.A", "CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
prettytColumnNames <- c("GPR32", "CD19","IgD", "Zombie","CD24", "CD27")
automatedcofactors <- c(1.503293e+00, 2.027570e+03, 2.339149e+04, 4.960322e-01,
1.371552e+03, 6.442128e+00, 1.620503e+01)
workingDirectory <- getwd()
setwd("C:/Users/guypw/OneDrive/Documents/resolvinAnalysis/data/isotypes/bCells_ISO")
filenames <- list.files(pattern = ".csv")
read.flow_csv <- function(pathIN) {
raw <-
read.csv(
pathIN,
sep = ",",
header = TRUE,
stringsAsFactors = FALSE
)
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if (any(duplicated(raw))) {
cat(paste0(
"=== Duplicate entries removed in [",
pathIN,
"]: ",
length(IND),
" ===\n"
))
print(head(raw[IND,]))
cat("----\n")
}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
selectColumnsOfInterest <-
function(df, columnNames, prettytColumnNames) {
df <- df[, columnNames]
colnames(df) <- prettytColumnNames
return(df)
}
dfs2 <-
sapply(
filenames,
selectColumnsOfInterest,
columnNames = columnNames,
prettytColumnNames = prettytColumnNames
)
df <- dfs2[1]
df <- dfs[1]
head(df)
df[, columnNames]
columnNames
colnames(columnNames)
colnames(df)
df <- df[1]
df <- df[, columnNames]
df[, columnNames]
df <- dfs[1]
df <- df[1]
df
df <- df[, columnNames]
df
df <- df[[1]]
df
df <- df[, columnNames]
colnames(df) <- prettytColumnNames
prettytColumnNames
columnNames
bCellsColumnNames <- c("GPR32...AF488.A", "CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
columnNames <- bCellsColumnNames
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
selectColumnsOfInterest <-
function(df, columnNames, prettytColumnNames) {
df <- df[[1]]
df <- df[, columnNames]
colnames(df) <- prettytColumnNames
return(df)
}
dfs2 <-
sapply(
filenames,
selectColumnsOfInterest,
columnNames = columnNames,
prettytColumnNames = prettytColumnNames
)
dfs
names(dfs)
dfs2 <-
lapply(
filenames,
selectColumnsOfInterest,
columnNames = columnNames,
prettytColumnNames = prettytColumnNames
)
df <- dfs[1]
df <- df[[, columnNames]]
df[]
colnames(df)
colnames(df[1])
colnames(df[])
colnames(df[[1]])
colnames(df[[]])
colnames(df[[1,]])
colnames(df[[1]][, columnNames])
df <- df[[1]][, columnNames]
colnames(df[[1]]) <- prettytColumnNames
colnames(df[[1]])
df[[1]]
columnNames
prettytColumnNames
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat) {
# Compute required metadata - column names with description -
# ranges, min, and max settings
meta <- data.frame(
name = dimnames(dat)[[2]],
desc = paste(dimnames(dat)[[2]]),
range = (apply(apply(dat, 2, range), 2, diff)),
minRange = apply(dat, 2, min),
maxRange = apply(dat, 2, max)
)
# Create flowframe
flowframef <- new("flowFrame",
exprs = as.matrix(dat),
parameters = AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs, function(x)
csv_2_ff(x), simplify = FALSE)
gc()
dfs_fs <- as(dfs_ff, "flowSet")
selectColumnsOfInterest <-
function(df, columnNames, prettytColumnNames) {
exprs(df) <- exprs(df)[, columnNames]
colnames(exprs(df)) <- prettytColumnNames
return(df)
}
x <-
fsApply(dfs_fs, selectColumnsOfInterest, columnNames, prettytColumnNames)
df <- dfs_fs[1]
exprs(df)
df <- dfs_fs[[1]]
exprs(df)
exprs(df) <- exprs(df)[, columnNames]
colnames(exprs(df)) <- prettytColumnNames
colnames(exprs(df))
prettytColumnNames
markernames(df)
markernames(df) <- prettytColumnNames
names(prettytColumnNames) <- columnNames
markernames(df) <- prettytColumnNames
markernames(df)
exprs(df)
names(prettytColumnNames) <- prettytColumnNames
prettytColumnNames
markernames(df) <- prettytColumnNames
colnames( exprs(df))
colnames( exprs(df)) <- prettytColumnNames
plot(df)
names(df)
names(df) <- prettytColumnNames
featureNames(df) <- prettytColumnNames
featureNames(df)
markernames(dfs_fs)
selectColumnsOfInterest <-
function(df, columnNames, prettytColumnNames) {
exprs(df) <- exprs(df)[, columnNames]
#names(prettytColumnNames) <- columnNames
#markernames(df) <- prettytColumnNames
return(df)
}
x <-
fsApply(dfs_fs, selectColumnsOfInterest, columnNames, prettytColumnNames)
markernames(x)
markernames(x) <- prettytColumnNames
typeof(dfs)
df <- dfs[1]
names(df)
dfs["BLT00195.csv"]
df[,columnNames]
df[[,columnNames]]
names(df)
df <- df[1]
df
df[,columnNames]
df <- dfs[1]
dfName <- names(df)
df <- df[[1]]
head(df)
df <- df[,columnNames]
prettyColumnNames <- c("GPR32", "CD19","IgD", "Zombie","CD24", "CD27")
colnames(df) <- prettyColumnNames
dfs[dfName] <- df
dfs[dfName]
df
dfs[[dfName]]
dfs[[dfName]] <- df
dfs[[dfName]]
for (df in dfs){
dfName <- names(df)
df <- df[[1]]
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[[dfName]] <- df
}
df[[1]]
dfs
for (df in dfs){
dfName <- names(df)
df <- df[1]
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[[dfName]] <- df
}
df
head(df)
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
for (df in dfs){
dfName <- names(df)
df <- df[1]
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[[dfName]] <- df
}
dfs
df
for (df in dfs){
dfName <- names(df)
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[[dfName]] <- df
}
for (df in dfs){
dfName <- names(df)
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[dfName] <- df
}
df
dfs
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
for (df in dfs){
dfName <- names(df)
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[dfName] <- c(df)
}
c(df)
df
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
for (df in dfs){
dfName <- names(df)
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[dfName] <- as.data.frame(df)
}
dfs[dfName]
length(dfs)
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
length(dfs)
x <- 1
df <- dfs[[x]]
head(df)
df <- df[,columnNames]
head(df)
colnames(df) <- prettyColumnNames
colnames(df)
dfs[[x]]  <- df
for (x in length(dfs)){
df <- dfs[[x]]
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[[x]]  <- df
}
x
dfs[[x]]
names(dfs)
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat) {
# Compute required metadata - column names with description -
# ranges, min, and max settings
meta <- data.frame(
name = dimnames(dat)[[2]],
desc = paste(dimnames(dat)[[2]]),
range = (apply(apply(dat, 2, range), 2, diff)),
minRange = apply(dat, 2, min),
maxRange = apply(dat, 2, max)
)
# Create flowframe
flowframef <- new("flowFrame",
exprs = as.matrix(dat),
parameters = AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs, function(x)
csv_2_ff(x), simplify = FALSE)
dfs_fs <- as(dfs_ff, "flowSet")
## Defining a function to read a flow cytrometry file in csv format:
# Each row is a cell, each column is a parameter. In our experience, the
# flow cytometers sometimes output duplicate entries (listing the same cell
# twice), we remove these and report.
# Please check how your csv file is separated and adjust the sep argument
# in the function if necessary. In this example we import a semicolon
# separated file.
read.flow_csv <- function(pathIN) {
raw <-
read.csv(
pathIN,
sep = ",",
header = TRUE,
stringsAsFactors = FALSE
)
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if (any(duplicated(raw))) {
cat(paste0(
"=== Duplicate entries removed in [",
pathIN,
"]: ",
length(IND),
" ===\n"
))
print(head(raw[IND,]))
cat("----\n")
}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
for (x in length(dfs)){
df <- dfs[[x]]
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[[x]]  <- df
}
names(dfs)
length(dfs)
dfs[[1]]
df
x
for (x in seq(length(dfs))){
df <- dfs[[x]]
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[[x]]  <- df
}
seq(length(dfs))
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
for (x in seq(length(dfs))){
df <- dfs[[x]]
df <- df[,columnNames]
colnames(df) <- prettyColumnNames
dfs[[x]]  <- df
}
dfs[[x]]
library(statmod)
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat) {
# Compute required metadata - column names with description -
# ranges, min, and max settings
meta <- data.frame(
name = dimnames(dat)[[2]],
desc = paste(dimnames(dat)[[2]]),
range = (apply(apply(dat, 2, range), 2, diff)),
minRange = apply(dat, 2, min),
maxRange = apply(dat, 2, max)
)
# Create flowframe
flowframef <- new("flowFrame",
exprs = as.matrix(dat),
parameters = AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs, function(x)
csv_2_ff(x), simplify = FALSE)
gc()
rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff, "flowSet")
gc()
rm(dfs_ff)
dfs_fs_t_auto <- dfs_fs
dfs_fs_t_auto_normfda <- dfs_fs
