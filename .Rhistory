library(ggrepel)
library(tidyverse)
}
try(source("R/04_functions.R"))
loadlibraries()
directoryName <- "bcells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
getwd()
setwd("..")
setwd("..")
getwd()
try(source("R/04_functions.R"))
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
dev.off()
try(source("R/04_functions.R"))
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
getwd()
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
getwd()
setwd("..")
setwd("..")
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "bCells"
columnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"CD24...BV605.A","CD27...BV650.A","Zombie.NIR.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
getwd()
setwd("..")
setwd("..")
gc()
gc()
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
workingDirectory <- getwd()
setwd(paste0("./data/", directoryName))
rm(list = ls())
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
if (test) {
filenames <- filenames[1:2]
}
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD4.PE.CF594.A","CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A",
"CD8.BV650.A", "CD28.BV785.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
workingDirectory <- getwd()
setwd(paste0("./data/", directoryName))
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
if (test) {
filenames <- filenames[1:2]
}
filenames
df <- read.csv(filenames[1], sep=",", header=TRUE)
rm(df)
read.flow_csv <- function(pathIN){
raw <- read.csv(pathIN, sep=",", header=TRUE, stringsAsFactors=FALSE)
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if(any(duplicated(raw))){
cat(paste0("=== Duplicate entries removed in [",pathIN,"]: ",length(IND)," ===\n"))
print(head(raw[IND,]))
cat("----\n")
}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames,read.flow_csv,simplify=FALSE)
gc()
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat){
# Compute required metadata - column names with description - ranges, min, and max settings
meta <- data.frame(name=dimnames(dat)[[2]],
desc=paste(dimnames(dat)[[2]]),
range =(apply(apply(dat,2,range),2,diff)),
minRange = apply(dat,2,min),
maxRange = apply(dat,2,max))
# Create flowframe
flowframef <- new("flowFrame",exprs=as.matrix(dat),parameters=AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs,function(x) csv_2_ff(x),simplify=FALSE)
gc()
rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff,"flowSet")
gc()
rm(dfs_ff)
###############################
####### TRANSFORMATION ########
###############################
## Each parameter of interest needs to be arcsinh transformed with an individual cofactor. The cofactor can be deduced from the size of the linear region around zero on a biexponential scale, as plotted in a histogram (in conventional gating software).
# Choose manual transformation or automated transformation (we prefer manual)
# Define parameters and cofactors for transformations:
gc()
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
gc()
df <- read.csv(filenames[1])
colnames(df)
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
filenames
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
test <- TRUE
workingDirectory <- getwd()
setwd(paste0("./data/", directoryName))
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
if (test) {
filenames <- filenames[1:2]
}
df <- read.csv(filenames[1])
colnames(df)
## Defining a function to read a flow cytrometry file in csv format:
# Each row is a cell, each column is a parameter. In our experience, the flow cytometers sometimes output duplicate entries (listing the same cell twice), we remove these and report.
# Please check how your csv file is separated and adjust the sep argument in the function if necessary. In this example we import a semicolon separated file.
read.flow_csv <- function(pathIN){
raw <- read.csv(pathIN, sep=",", header=TRUE, stringsAsFactors=FALSE)
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if(any(duplicated(raw))){
cat(paste0("=== Duplicate entries removed in [",pathIN,"]: ",length(IND)," ===\n"))
print(head(raw[IND,]))
cat("----\n")
}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames,read.flow_csv,simplify=FALSE)
gc()
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat){
# Compute required metadata - column names with description - ranges, min, and max settings
meta <- data.frame(name=dimnames(dat)[[2]],
desc=paste(dimnames(dat)[[2]]),
range =(apply(apply(dat,2,range),2,diff)),
minRange = apply(dat,2,min),
maxRange = apply(dat,2,max))
# Create flowframe
flowframef <- new("flowFrame",exprs=as.matrix(dat),parameters=AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff = sapply(dfs,function(x) csv_2_ff(x),simplify=FALSE)
gc()
rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff,"flowSet")
gc()
rm(dfs_ff)
###############################
####### TRANSFORMATION ########
###############################
## Each parameter of interest needs to be arcsinh transformed with an individual cofactor. The cofactor can be deduced from the size of the linear region around zero on a biexponential scale, as plotted in a histogram (in conventional gating software).
# Choose manual transformation or automated transformation (we prefer manual)
# Define parameters and cofactors for transformations:
gc()
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
gc()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A")
automatedcofactors <- estParamFlowVS(dfs_fs, columnNames) #this may take a while.
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A")
test <- TRUE
preprocessing(directoryName,columnNames, test)
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
test <- FALSE
preprocessing(directoryName,columnNames, test)
gc()
gc()
try(source("R/03_functions.R"))
getwd()
loadlibraries()
directoryName <- "senescence"
columnNames <- c("GPR32.AF488.A","KLRG1.PE.A","CD4.PE.CF594.A",
"CD8.PerCP.Cy5.5.A","CCR7.PE.Cy7.A", "CD28.BV785.A",
"Zombie.NIR.A", "CD27.BV421.A", "CD45RA.BV605.A")
test <- FALSE
preprocessing(directoryName,columnNames, test)
library(R.utils)
workingDirectory <- getwd()
dataDirectorys <- c("/data/bCells"
#,"/data/monocytes",
#"/data/senescence","/data/tCells"
)
for (directory in dataDirectorys) {
try(setwd(paste0(workingDirectory,directory)))
gzFilenames <- list.files(pattern = ".gz")
for (gzFilename in gzFilenames) {
gunzip(gzFilename)
}
}
setwd(workingDirectory)
getwd()
library(R.utils)
workingDirectory <- getwd()
dataDirectorys <- c("/data/bCells","/data/monocytes",
"/data/senescence","/data/tCells")
for (directory in dataDirectorys) {
try(setwd(paste0(workingDirectory,directory)))
print(getwd())
filenames <- list.files(pattern = ".csv")
for (filename in filenames) {
gzip(filename)
}
}
setwd(workingDirectory)
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
columnNames <- bCellsColumnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames
as.formula(paste("caseControl", paste(columnNames, collapse=" + "), sep=" ~ "))
bCellsDirectoryName <- "bCells"
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
tCellsDirectoryName <- "tCells"
tCellsColumnNames <- c("GPR32","CD127","CD3", "Zombie.NIR.A","CD8", "CD25", "FoxP3", "CD45RO", "CD4")
monocytesDirectoryName <- "monocytes"
monocytesColumnNames <- c("CD11b","CD14", "Zombie.NIR.A","CD16", "CD11b activated")
test <- FALSE
directoryName <- bCellsDirectoryName
columnNames <- bCellsColumnNames
as.formula(paste("caseControl", paste(columnNames, collapse=" + "), sep=" ~ "))
formula <- as.formula(paste(" ~ ", columnName))
formula <- as.formula(paste(" ~ ", columnNames))
columnNameFormula <- as.formula(paste(" ~ ", columnNames))
columnNameFormula <- as.formula(paste(" ~ ", "densityPlot" #columnName
))
columnNameFormula
gc()
try(source("R/03_functions.R"))
bCellsDirectoryName <- "bCells"
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
directoryName <- bCellsDirectoryName
columnNames <- bCellsColumnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
convertToDataFrame(directoryName, columnNames, test)
loadlibraries()
convertToDataFrame(directoryName, columnNames, test)
directoryName
getwd()
setwd("..")
setwd("..")
getwd()
convertToDataFrame(directoryName, columnNames, test)
test <- TRUE
convertToDataFrame(directoryName, columnNames, test)
workingDirectory <- getwd()
clinicalData <- read.csv('data/metadata/metadata.csv')
getwd()
setwd("..")
setwd("..")
workingDirectory <- getwd()
workingDirectory
clinicalData <- read.csv('data/metadata/metadata.csv')
setwd(paste0("./data/", directoryName))
dirFCS <- paste0(getwd(), "/dataPPOutput")
pathST <- "X:/Users/guypw/OneDrive/Documents.txt"
read.flowdat <- function(dir,path_CSPLR_ST=""){
# Read:
filepaths <- list.files(path=dir,pattern = ".fcs", full.names=TRUE)
flowset <- read.flowSet(files=filepaths, transformation=FALSE,
truncate_max_range = FALSE)
# Transform to data frame:
x <- as.data.frame(exprs(as(flowset,'flowFrame')),stringsAsFactors=FALSE)
# Map column 'Original' to filename (in this case holding clusters of
# HSNE):
filenames <- gsub("[.fcs]","",list.files(path=dir,pattern = ".fcs",
full.names=FALSE))
names(filenames) <- sort(unique(x$Original))
x$fileName <- filenames[as.character(x$Original)]
# Remove column 'Original':
x <- x[,-which(colnames(x)=="Original")]
# Optionally remap Cytosplore sample tags to original filename:
if(file.exists(path_CSPLR_ST)){
# Read:
sampID <- gsub(
".fcs","",basename(sapply(strsplit(readLines(path_CSPLR_ST),": "),
function(x) x[1])))
names(sampID) <- sapply(
strsplit(readLines(path_CSPLR_ST),": "),function(x) x[2])
x$sampleID <- sampID[as.character(x$CSPLR_ST)]
}
return(x)
}
## Read fcs files
# In our example we will read the data which were clustered in Cytosplore
# (each fcs file is 1 cluster)
df <- read.flowdat(dir=dirFCS[1],path_CSPLR_ST = pathST)
df
gc()
if (test) {
df <- df[seq_len(nrow(df)/50),]
}
write.csv(df, 'dataPPOutput/rawDf.csv')
gc()
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
bCellsColumnNames
columnNames <- bCellsColumnNames
columnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
columnNames
columnNames <- c("GPR32...AF488.A", "IgD...PerCP.Cy5.5.A", "CD24...BV605.A", "CD27...BV650.A")
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
columnNames
columnNames
columnNames <- c("GPR32...AF488.A", "IgD...PerCP.Cy5.5.A", "CD24...BV605.A", "CD27...BV650.A")
columnNames
bCellsDirectoryName <- "bCells"
bCellsColumnNames <- c("GPR32...AF488.A","CD19...PE.CF595.A","IgD...PerCP.Cy5.5.A",
"Zombie.NIR.A","CD24...BV605.A", "CD27...BV650.A")
test <- TRUE
directoryName <- bCellsDirectoryName
columnNames <- bCellsColumnNames
columnNames <- columnNames[columnNames!= "Zombie.NIR.A"]
columnNames <- columnNames[columnNames!= "CD19...PE.CF595.A"]
columnNames
columnNames
updatedColumnNames <- append(columnNames,"fileName")
updatedColumnNames
df <- df[,updatedColumnNames]
df
gc()
write.csv(df, 'dataPPOutput/columnsOfInterestDf.csv')
gc()
df <- merge(df, clinicalData, by.x = "fileName", by.y = "id")
df["caseControl"][df["caseControl"] == "Case"] <- 1
df["caseControl"][df["caseControl"] == "Control"] <- 0
df["fastSlow"][df["fastSlow"] == "Fast"] <- 1
df["fastSlow"][df["fastSlow"] == "Slow"] <- 0
df["fastSlow"][df["fastSlow"] == "N/A"] <- -1
gc()
write.csv(df, 'dataPPOutput/columnsOfInterestPlusClinicalDataDf.csv')
gc()
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
df <- merge(df, clinicalData, by.x = "fileName", by.y = "id")
df
clinicalData
df <- tryCatch({merge(df, clinicalData, by.x = "fileName", by.y = "ï..id")},
error=function(x) {
merge(df, clinicalData, by.x = "fileName", by.y = "id")
})
df
df["caseControl"][df["caseControl"] == "Case"] <- 1
df["caseControl"][df["caseControl"] == "Control"] <- 0
df["fastSlow"][df["fastSlow"] == "Fast"] <- 1
df["fastSlow"][df["fastSlow"] == "Slow"] <- 0
df["fastSlow"][df["fastSlow"] == "N/A"] <- -1
gc()
write.csv(df, 'dataPPOutput/columnsOfInterestPlusClinicalDataDf.csv')
gc()
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
getwd()
setwd(paste0("./data/", directoryName))
write.csv(df, 'dataPPOutput/columnsOfInterestPlusClinicalDataDf.csv')
tryCatch({
setwd(workingDirectory)},
error=function(cond) {
setwd("..")
setwd("..")
})
