if(length(timeRefgroup)>0){
coxres <- coxres[-timeRefgroup,] # Remove the T>1 reference groups
timeRefgroup_t1<- which(coxres$Time==1 & !is.na(coxres$var_levels) & is.na(coxres$coef))
coxres$Time[timeRefgroup_t1] <- NA
}
## Generate meaningful time interval labels
if(length(cutpoints)==1){
TimeLabels <- c(paste0("0<:",cutpoints[1]),paste0(cutpoints[length(cutpoints)],"<"))
} else {
TimeLabels <- c(paste0("0<:",cutpoints[1]),
sapply(cutpoints[2:length(cutpoints)],function(x,cutpoints){
paste0(cutpoints[(which(cutpoints==x)-1)],"<:",x)
},cutpoints),
paste0(cutpoints[length(cutpoints)],"<"))
}
#If time is truncated, drop timepoints
if("0ToFirst" %in% truncatecutpoints){
TimeLabels <- TimeLabels[-1]
}
if("lastToEnd" %in% truncatecutpoints){
TimeLabels <- TimeLabels[-length(TimeLabels)]
}
#Identify any time-independent levels, and create their own time frame based on full interval modelled
timeIndep<- is.na(coxres$Time)
if(any(timeIndep)){
coxres$Time[is.na(coxres$Time)] <- length(TimeLabels)+1
if(grepl("<$",TimeLabels[length(TimeLabels)]) || length(TimeLabels)==1){
indepLabel<- gsub(":.*","",TimeLabels[1])
} else {
indepLabel<- paste0(gsub(":.*","",TimeLabels[1]),":",gsub(".*:","",TimeLabels[length(TimeLabels)]))
}
TimeLabels <- c(TimeLabels,indepLabel)
}
coxres$Time <- factor(coxres$Time,levels=1:length(TimeLabels),labels = TimeLabels)
}
####
## Generate summary plot
####
plotdataset<- coxres %>%
mutate(`Pr(>|z|)` = if_else(grepl("<",`Pr(>|z|)`),gsub("<","< ",`Pr(>|z|)`),paste0("= ",`Pr(>|z|)`)), #Tidy p-value signs
Variables = case_when(!is.na(var_levels) & !is.na(`exp(coef)`) ~ paste0(var_levels,"\n[p ",`Pr(>|z|)`,"; N = ",N,"]"),
!is.na(var_levels) & is.na(`exp(coef)`) ~ paste0(var_levels,"\n[reference group; N = ", N,"]"),
#is.na(var_levels)  ~ paste0(vars,"\n[reference group; N = ", N,"]"),
TRUE ~ paste0(vars,"\n[p ",`Pr(>|z|)`,"; N = ", N,"]")),
`exp(coef)` = case_when(!is.na(`exp(coef)`) ~ `exp(coef)`,
TRUE ~ 1
)
)
plotdataset %>%
group_by(vars) %>%
arrange(desc(`exp(coef)`), .by_group=TRUE)
plotdataset %>%
group_by(vars)
View(plotdataset)
plotdataset %>%
dplyr::group_by(vars) %>%
dplyr::arrange(desc(`exp(coef)`), .by_group=TRUE) %>%
dplyr::ungroup()
if(any(incTime)){
plotdataset <- plotdataset %>%
group_by(vars) %>%
arrange(desc(Time),desc(`exp(coef)`), .by_group=TRUE) %>%
rowwise() %>%
mutate(Variables=if_else(!is.na(Time),gsub("\n",paste0(" (Time ",Time,")\n"),Variables),
Variables
)) %>%
ungroup()
} else {
plotdataset <- plotdataset %>%
dplyr::group_by(vars) %>%
dplyr::arrange(desc(`exp(coef)`), .by_group=TRUE) %>%
dplyr::ungroup()
}
plotdataset <- plotdataset %>%
mutate(VarLabels=factor(row_number(),labels=Variables),
background=if_else(as.integer(factor(vars)) %% 2 == 0,2,1),
background=case_when(row_number()==1 ~ 1,
lag(background)!=background ~ background,
TRUE ~ NA_real_),
panelstrip=if_else(!is.na(background),vars,NA_character_)
)
plot <- ggplot(plotdataset,aes(x=`exp(coef)`,y=VarLabels,fill = factor(background)))+
facet_grid(rows=vars(factor(vars)),scales = "free", space="free")+
geom_point(aes(size=N),shape="diamond")+#,position = position_dodge(width=0.4))+
geom_errorbar(aes(xmin=`lower .95`,xmax=`upper .95`),width=0.2)+#,position=position_dodge(width=0.4))+
scale_size(guide=NULL,range=c(2.5,5))+
geom_vline(xintercept=1,lty=2)+
theme_minimal()+
geom_rect(xmin = -Inf,xmax = Inf, ### Colour the panels alternately
ymin = -Inf,ymax = Inf,alpha = 0.4) +
geom_text(aes(x = Inf, y = Inf, label = ifelse(is.na(panelstrip), "",panelstrip)), hjust="right", vjust="top",fontface = "bold")+
scale_fill_manual(values=c("1"="azure3","2"="white"),na.value = NA,guide='none')+
labs(x="Hazard ratio [95% CI]")+
theme(axis.title.y = element_blank(),
panel.spacing.y=unit(0, "lines"),
strip.background = element_blank(),# element_rect(fill="azure3",colour = "azure3"),
strip.text.y =  element_blank()# element_text(margin = margin(5,5,20,5, "mm"))
)
plot
startcol<- which(colnames(coxres)=="coef")
roundcols<- startcol:ncol(coxres)
roundcols <- roundcols[!roundcols==which(colnames(coxres)=="Pr(>|z|)")]
if(!"robust se" %in% names(coxres)){ #If robust parameterisation not performed, create a dummy column
coxres$`robust se` <- NA
dummyRobust <- TRUE
} else {
dummyRobust <- FALSE
}
plot + scale_x_continuous(trans="log",
breaks=scales::breaks_extended())
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directoryNames <- c(
# "gpr18BCells"#,
# "gpr18Monocytes"#,
# "gpr18Senescence",
"gpr18TCells",
# "gpr32BCells"#,
# "gpr32Monocytes"#,
# "gpr32Senescence"#,
# "gpr32TCells"
)
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directoryNames <- c(
# "gpr18BCells"#,
# "gpr18Monocytes"#,
# "gpr18Senescence",
"gpr18TCells"#,
# "gpr32BCells"#,
# "gpr32Monocytes"#,
# "gpr32Senescence"#,
# "gpr32TCells"
)
clusterNames <- clusterColumns[4]
# clusterName <- clusterNames[1]
#
# directoryName <- "gpr32TCells"
for (directoryName in directoryNames) {
message()
message(directoryName)
cellPopulationOrder <- identifyCellPopulationOrder(directoryName)
for (clusterName in clusterNames) {
message(clusterName)
try({
df <-
as.data.frame(fread(
paste0('data/', directoryName, '/clusteringOutput/umapDf.csv')
))
markerPopulations <-
as.data.frame(fread(
paste0(
'data/',
directoryName,
'/clusteringOutput/',
clusterName,
'Markers.csv'
)
))
cellPopulations <-
as.data.frame(fread(
paste0(
'data/',
directoryName,
'/clusteringOutput/',
clusterName,
'CellPopulations.csv'
)
))
colnames(cellPopulations)[colnames(cellPopulations) == "cell_population"] <-
"typeOfCells"
df <-
merge(
x = df,
y = markerPopulations[, c(clusterName, "cell_population")],
by.x = clusterName,
by.y = clusterName,
all.x = TRUE
)
df <-
merge(
x = df,
y = cellPopulations[, c(clusterName, "typeOfCells")],
by.x = clusterName,
by.y = clusterName,
all.x = TRUE
)
df$cluster_id <- df$cell_population
df <- updateMarkerNames(df)
df <- left_join(data.frame(typeOfCells = cellPopulationOrder), df, by = "typeOfCells")
df <- na.omit(df)
df$ID <- as.factor(as.numeric(factor(df$typeOfCells, levels = unique(df$typeOfCells))))
df$typeOfCells <-
paste0(df$typeOfCells, " (", df$ID, ")")
df$typeOfCells <-
factor(df$typeOfCells, levels = unique(df$typeOfCells))
metacluster_colours <-
as.vector(colortools::wheel('#F8766D', num = length(levels(df$typeOfCells))))
label <-
df %>% group_by(ID, typeOfCells) %>%
dplyr::select(umap_1, umap_2) %>% summarize_all(mean) %>%
as.data.frame()
par(mar = c(1, 1, 1, 1))
plot <-
ggplot(df, aes(
x = umap_1,
y = umap_2,
color = as.factor(typeOfCells)
)) +
geom_point(size = 0.1) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_label_repel(
aes(label = as.integer(ID)),
data = label,
segment.colour = "black",
size = 4,
force_pull = 0,
max.time = 2,
show.legend = FALSE,
max.overlaps = Inf,
fontface = "bold"
) +
labs(y = "UMAP 2", x = "UMAP 1")  +
scale_color_manual(values = metacluster_colours) +
guides(
color = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
),
fill = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
),
guide = guide_legend(
title = "Cell Populations",
override.aes = list(shape = 16, size = 3,
ncol = 1),
ncol = 1
)
)
print(plot)
})
}
rm(list = ls()[!ls() %in% c("directoryNames", "clusterNames",
"directoryName", "clusterName")])
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
}
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directoryName <- "gpr18TCells"
columnNames <- gpr18TCellsClusteringColumnNames
prettyColumnNames <- gpr18TCellsClusteringColumnNames
clusterNames <- clusterColumns[4]
markersOrCells <- markersOrCellsClassification[3]
markerType <- "Phenotypic"
#clusterNames <-c(clusterNames[4])
#clusterName <- clusterNames[1]
#markersOrCellS <- c(markersOrCells[3])
#markersOrCell <- c(markersOrCells[1])
df <- fread(file=paste0("./data/", directoryName, '/clusteringOutput/umapDf.csv'))
df <- as.data.frame(df)
for (markersOrCell in markersOrCells) {
for (clusterName in clusterNames) {
message(markersOrCell)
message(clusterName)
try(source("R/01_functions.R"))
generateHeatmap(df, clusterName, directoryName, columnNames, markersOrCell, markerType)
}
}
#
# markerType <- "Functional"
#
# columnNames <-
#   c(
#     "GPR18"
#   )
#
# prettyColumnNames <-   c(
#   "GPR18"
# )
#
# for (markersOrCell in markersOrCells) {
#   for (clusterName in clusterNames) {
#     generateHeatmap(df, clusterName, directoryName, columnNames, markersOrCell, markerType, prettyColumnNames)
#   }
# }
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
clusterNames <- clusterColumns
markersOrCells <- markersOrCellsClassification
figureNames <-
c(
"DifferentialStatesStatisticscsv"#,
# "DifferentialAbundanceStatisticscsv"
)
markersOrCells <- markersOrCells[3]
clusterNames <- clusterNames[4]
markers <- c(
"GPR18"#,
# "GPR32"
)
directoryNames <- c(
# "BCells"#,
# "Monocytes"#,
# "Senescence"#,
"TCells"
)
clusterName <- "clusters_phenograph"
markersOrCell <- "Markers"
figureName <- "DifferentialStatesStatisticscsv"
directoryName <- "TCells"
comparisonsList <- list(
alsAndSubGroupsVsControlsComparisons,
progressionSubGroupsVsControlsComparisons,
progressionSubGroupsVsSubGroupsComparisons,
londitudinalComparisons
)
regulation <- c(
"Upregulated"  = "Red",
"Not Statistically Different" = "Grey",
"Downregulated" = "Blue"
)
for (directoryName in directoryNames) {
cellPopulationOrder <- identifyCellPopulationOrder(directoryName)
for (clusterName in clusterNames) {
for (markersOrCell in markersOrCells) {
for (figureName in figureNames) {
message(directoryName)
message(clusterName)
message(markersOrCell)
message(figureName)
combinedDf <-
fread(
paste0(
"data/pValueAdjustmentsResults/",
clusterName,
markersOrCell,
figureName,
".csv"
)
)
combinedDf <- as.data.frame(combinedDf)
colnames(combinedDf) <-
gsub(" ", "", colnames(combinedDf), fixed = TRUE)
colnames(combinedDf) <-
gsub("-", "", colnames(combinedDf), fixed = TRUE)
colnames(combinedDf) <-
gsub("(", "", colnames(combinedDf), fixed = TRUE)
colnames(combinedDf) <-
gsub(")", "", colnames(combinedDf), fixed = TRUE)
colnames(combinedDf)[colnames(combinedDf) %in% c("ID", "CellPopulationName")] <-
c("cluster_id", "typeOfCells")
combinedDf <-
combinedDf[!is.na(combinedDf$LogFoldChange), ]
yLimit <-
ceiling(max(combinedDf$MinusLogFDRAdjustedPValue))
scaleLimits <-
ceiling(max(abs(min(
na.omit(combinedDf$LogFoldChange)
)), max(
na.omit(combinedDf$LogFoldChange)
)))
combinedDf$regulation <- "Not Statistically Different"
try({
combinedDf[combinedDf$FDRAdjustedPValue < 0.05 &
combinedDf$LogFoldChange < 0, "regulation"] <-
"Downregulated"
})
try({
combinedDf[combinedDf$FDRAdjustedPValue < 0.05 &
combinedDf$LogFoldChange > 0, "regulation"] <-
"Upregulated"
})
combinedDf <- updateMarkerNames(combinedDf)
combinedDf <- left_join(data.frame(typeOfCells = cellPopulationOrder), combinedDf, by = "typeOfCells")
combinedDf$typeOfCells <-
gsub("\\(", "\n\\(", combinedDf$typeOfCells)
cellPopulationOrder <- unique(combinedDf$typeOfCells)
combinedDf$regulation <-
factor(combinedDf$regulation,
levels = names(regulation))
try({combinedDf <- filterFlowCytometryComparisons(combinedDf)})
goldenSource <- combinedDf
for (comparisons in comparisonsList) {
combinedDf <- goldenSource
combinedDf <-
combinedDf[combinedDf$Comparison %in% names(comparisons),]
combinedDf$Comparison <-
factor(combinedDf$Comparison, levels = names(comparisons))
combinedDf$Panel <- factor(combinedDf$Panel)
for (marker in markers) {
try({
message(marker)
combinedDf2 <-
combinedDf[combinedDf$Marker == marker,]
combinedDf2 <-
combinedDf2[combinedDf2$Panel %in% paste0(tolower(marker), directoryName),]
combinedDf2$typeOfCells <-
paste0(combinedDf2$typeOfCells,
" (",
as.numeric(
factor(combinedDf2$typeOfCells, levels = unique(combinedDf2$typeOfCells))
) - 1,
")")
combinedDf2$typeOfCells <-
factor(combinedDf2$typeOfCells,
levels = unique(combinedDf2$typeOfCells))
fig <-
ggplot(
combinedDf2,
aes(
x = as.factor(typeOfCells),
y = MinusLogFDRAdjustedPValue,
fill = LogFoldChange,
colour = regulation,
shape = Comparison,
size = jaccard
)
) +
geom_point(
alpha = 1,
size = 5,
stroke = 1,
position = position_jitter(width = 0.1, height = 0)
) +
theme_bw() +
theme(
axis.text.x = element_text(
angle = 90,
vjust = 0.5,
hjust = 1,
size = 8
),
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
legend.justification = "top"
) +
scale_shape_manual(values = comparisons, drop = FALSE) +
scale_colour_manual(values = regulation, drop = FALSE) +
guides(
color = guide_legend(
title = if (figureName == "DifferentialStatesStatisticscsv") {
"Expression"
} else {
"Counts"
}
,
order = 1,
override.aes = list(shape = 1, size = 4)
),
fill = guide_colourbar(title = "log2(Fold Change)", order = 2),
shape = guide_legend(
title = "Comparison",
order = 3,
override.aes = list(size = 4)
)
) +
xlab("Cell Populations") +
ylab("-log10(Adjusted P-Value)") +
ylim(0, yLimit) +
scale_fill_gradientn(
limits = c(0 - scaleLimits, scaleLimits),
colours = c(
"#0000FF",
"#2E2EFF",
"#5C5CFF",
"#8A8AFF",
"#ffffff",
"#FF8A8A",
"#FF5C5C",
"#FF2E2E",
"#FF0000"
)
) +
geom_hline(yintercept = 0 - log10(0.05),
linetype = "dashed")
print(fig)
})
}
}
message("")
rm(list = ls()[!ls() %in% c(
"clusterNames",
"markersOrCells",
"figureNames",
"directoryNames",
"clusterName",
"markersOrCell",
"figureName",
"directoryName",
"comparisons",
"comparisonsList",
"regulation",
"cellPopulationOrder"
)])
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
}
}
}
}
