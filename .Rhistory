}
#if ("GPR18...AF488.A" %in% colnames(raw)){
#  print("")
#  print(pathIN)
#  #print(colnames(raw))
#}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
xlist <- c()
for (x in seq(length(dfs))) {
df <- dfs[[x]]
# print("")
# print(colnames(df))
# print("")
xlist <- append(xlist, colnames(df))
xcolumnNames <- columnNames[columnNames %in% colnames(df)]
xprettyColumnNames <- prettyColumnNames[columnNames %in% colnames(df)]
# print(columnNames[!columnNames %in% colnames(df)])
df <- df[, xcolumnNames]
colnames(df) <- xprettyColumnNames
dfs[[x]]  <- df
if(length(xcolumnNames) < 6){
print(names(dfs[x]))
}
}
csv_2_ff <- function(dat) {
message(dimnames(dat)[[2]])
# Compute required metadata - column names with description -
# ranges, min, and max settings
meta <- data.frame(
name = dimnames(dat)[[2]],
desc = paste(dimnames(dat)[[2]]),
range = (apply(apply(dat, 2, range), 2, diff)),
minRange = apply(dat, 2, min),
maxRange = apply(dat, 2, max)
)
# Create flowframe
flowframef <- new("flowFrame",
exprs = as.matrix(dat),
parameters = AnnotatedDataFrame(meta))
return(flowframef)
}
dfs_ff <- sapply(dfs, function(x)
csv_2_ff(x), simplify = FALSE)
gc()
dfs_fs <- as(dfs_ff, "flowSet")
dir.create("figures", showWarnings = FALSE)
prettyColumnNames <- unique(prettyColumnNames)
if (is.null(automatedcofactors)) {
gc()
jpeg(file = "figures/automatedcofactors.jpeg", quality = 100)
automatedcofactors <- estParamFlowVS(dfs_fs, prettyColumnNames)
dev.off()
try(capture.output(automatedcofactors,
file = "dataPPOutput/automatedcofactors.txt"))
gc()
}
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
setwd("..")
setwd("..")
getwd()
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directoryName <- "gpr18BCells"
columnNames <- c("GPR32 - AF488-A", "GPR18 - AF488-A",
"CD19 - PE-CF595-A",
"IgD - PerCP-Cy5.5-A",
"Zombie NIR-A",
"CD24 - BV605-A", "CD27 - BV650-A")
prettyColumnNames <- c("GPR18", "GPR18",
"CD19",
"IgD",
"Zombie","CD24", "CD27")
automatedcofactors <- c(1.503293e+00, 2.339149e+04, 4.960322e-01,
1.371552e+03, 6.442128e+00, 1.620503e+01)
test <- FALSE
preprocessing(directoryName, columnNames, prettyColumnNames, test,
automatedcofactors = NULL)
prettyColumnNames <-
c(
'CD127',
'CD127',
'CD25',
'CD25',
#'CD3',
#'CD3',
'CD4',
'CD4',
'CD45RO',
'CD45RO',
'CD8',
'CD8',
'FoxP3',
'FoxP3',
'GPR18',
'GPR18',
'Zombie'
)
automatedcofactors <- c(2962.46160, 3709.97756, 123.13927, 2536.12924,
3602.32826, 56.13862, 402.84477, 101.70538)
length(unique(prettyColumnNames))
length(unique(automatedcofactors))
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directoryName <- "gpr18BCells"
columnNames <- c("GPR32 - AF488-A", "GPR18 - AF488-A",
#"CD19 - PE-CF595-A",
"IgD - PerCP-Cy5.5-A",
#"Zombie NIR-A",
"CD24 - BV605-A", "CD27 - BV650-A")
prettyColumnNames <- c("GPR18", "GPR18",
#"CD19",
"IgD",
#"Zombie",
"CD24", "CD27")
automatedcofactors <- c(2.166595e+01,
#1.717232e+04,
3.230456e-01,
#1.407461e+03,
1.928897e+00,
2.061957e+00)
test <- FALSE
BiocManager::install(
"flowStats"
)
workingDirectory <- getwd()
setwd(paste0("./data/", directoryName))
# Create an 'output' folder
gc()
dir.create("dataPPOutput", showWarnings = FALSE)
gc()
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
filenames <- filenames[!filenames %in% c("BLT00254_T2.csv",
"BLT00271_T2.csv",
"BLT00275_T2.csv",
"BLT00286_T2.csv",
"HC_BLT00282_T2.csv",
"HC_BLT00287_T2.csv")]
if (test) {
filenames <- filenames[1:4]
}
read.flow_csv <- function(pathIN) {
message(pathIN)
raw <-
fread(
pathIN#,
# ,
# sep = ",",
# header = TRUE,
# stringsAsFactors = FALSE,
#nrows = 100
)
raw <- as.data.frame(raw)
# message(colnames(raw))
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if (any(duplicated(raw))) {
cat(paste0(
"=== Duplicate entries removed in [",
pathIN,
"]: ",
length(IND),
" ===\n"
))
print(head(raw[IND, ]))
cat("----\n")
}
#if ("GPR18...AF488.A" %in% colnames(raw)){
#  print("")
#  print(pathIN)
#  #print(colnames(raw))
#}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
xlist <- c()
for (x in seq(length(dfs))) {
df <- dfs[[x]]
# print("")
# print(colnames(df))
# print("")
xlist <- append(xlist, colnames(df))
xcolumnNames <- columnNames[columnNames %in% colnames(df)]
xprettyColumnNames <- prettyColumnNames[columnNames %in% colnames(df)]
# print(columnNames[!columnNames %in% colnames(df)])
df <- df[, xcolumnNames]
colnames(df) <- xprettyColumnNames
dfs[[x]]  <- df
if(length(xcolumnNames) < 6){
print(names(dfs[x]))
}
}
##############################
#REWRITE TO FLOWFRAME/FLOWSET#
##############################
## Defining a function to rewrite a csv into a flowframe:
csv_2_ff <- function(dat) {
message(dimnames(dat)[[2]])
# Compute required metadata - column names with description -
# ranges, min, and max settings
meta <- data.frame(
name = dimnames(dat)[[2]],
desc = paste(dimnames(dat)[[2]]),
range = (apply(apply(dat, 2, range), 2, diff)),
minRange = apply(dat, 2, min),
maxRange = apply(dat, 2, max)
)
# Create flowframe
flowframef <- new("flowFrame",
exprs = as.matrix(dat),
parameters = AnnotatedDataFrame(meta))
return(flowframef)
}
# rewrite to flowframe
dfs_ff <- sapply(dfs, function(x)
csv_2_ff(x), simplify = FALSE)
gc()
#rm(dfs)
# rewrite to flowset
dfs_fs <- as(dfs_ff, "flowSet")
gc()
# rm(dfs_ff)
dir.create("figures", showWarnings = FALSE)
prettyColumnNames <- unique(prettyColumnNames)
if (is.null(automatedcofactors)) {
gc()
jpeg(file = "figures/automatedcofactors.jpeg", quality = 100)
automatedcofactors <- estParamFlowVS(dfs_fs, prettyColumnNames)
dev.off()
try(capture.output(automatedcofactors,
file = "dataPPOutput/automatedcofactors.txt"))
gc()
}
#auto
dfs_fs_t_auto <- transFlowVS(dfs_fs, channels = prettyColumnNames,
cofactor = automatedcofactors)
gc()
class(dfs_fs_t_auto)
prettyColumnNames
dfs_fs_t_auto_normfda <-
warpSet(dfs_fs_t_auto, stains = prettyColumnNames)
dfs_fs_t_auto_normfda_gated <- dfs_fs_t_auto_normfda
write.flowSet(dfs_fs_t_auto_normfda_gated,
outdir = 'dataPPOutput',
filename = paste0(gsub(
".csv", ".fcs",
sampleNames(dfs_fs_t_auto_normfda)
)))
##############################
########### Plots ############
##############################
# Pre-Normalized Plots
flowViz.par.set(theme =  trellis.par.get(), reset = TRUE)
figureDirectory <- paste0(getwd(), "/figures/")
# columnName <- prettyColumnNames[1]
for (columnName in prettyColumnNames) {
gc()
columnNameFormula <- as.formula(paste(" ~ ", columnName))
gc()
gc()
jpeg(file = paste0(
figureDirectory,
"rawDensityPlot",
str_replace_all(columnName, "\\.", ""),
".jpeg"
), quality = 100)
plot <-
densityplot(columnNameFormula, dfs_fs, main = "auto")
try(print(plot))
dev.off()
gc()
gc()
jpeg(file = paste0(
figureDirectory,
"transformedDensityPlot",
str_replace_all(columnName, "\\.", ""),
".jpeg"
), quality = 100)
plot <-
densityplot(columnNameFormula, dfs_fs_t_auto, main = "auto")
try(print(plot))
dev.off()
gc()
gc()
jpeg(
file = paste0(
figureDirectory,
"normalisedTransformedDensityPlot",
str_replace_all(columnName, "\\.", ""),
".jpeg"
), quality = 100
)
plot <-
densityplot(columnNameFormula, dfs_fs_t_auto_normfda, main = "auto")
try(print(plot))
dev.off()
gc()
gc()
jpeg(
file = paste0(
figureDirectory,
"gatedNormalisedTransformedDensityPlot",
str_replace_all(columnName, "\\.", ""),
".jpeg"
), quality = 100
)
plot <-
densityplot(columnNameFormula, dfs_fs_t_auto_normfda_gated, main = "auto")
try(print(plot))
dev.off()
gc()
}
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directoryName <- "gpr18Monocytes"
columnNames <- c(
"gpr18...AF488.A",
"CD11b...17BV421.A",
"CD14...BV605.A",
"HLA.Dr...BV650.A",
"CD16...PE.CF595.A",
"CD11b.activated...PE.Cy7.A",
"Zombie.NIR.A"
)
prettyColumnNames <- c("gpr18", "CD11b","CD14", "HLA_DR","CD16", "CD11b_activated", "Zombie")
automatedcofactors <- c(130.957690, 28828.722419, 41.415505,
1194.595206, 10.386289, 32.117761, 932.989806)
test <- FALSE
gate <- TRUE
gateTogether <- TRUE
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
directoryName <- "gpr18Monocytes"
columnNames <- c(
"gpr18...AF488.A",
"CD11b...17BV421.A",
"CD14...BV605.A",
"HLA.Dr...BV650.A",
"CD16...PE.CF595.A",
"CD11b.activated...PE.Cy7.A",
"Zombie.NIR.A"
)
prettyColumnNames <- c("gpr18", "CD11b","CD14", "HLA_DR","CD16", "CD11b_activated", "Zombie")
test <- FALSE
gate <- TRUE
gateTogether <- TRUE
gateColumns <- data.frame (CD14  = c(0),
CD16 = c(0))
automatedcofactors = NULL
workingDirectory <- getwd()
setwd(paste0("./data/", directoryName))
# Create an 'output' folder
gc()
dir.create("dataPPOutput", showWarnings = FALSE)
gc()
# Find file names of .csv files in the current working directory:
filenames <- list.files(pattern = ".csv")
filenames <- filenames[!filenames %in% c("BLT00254_T2.csv",
"BLT00271_T2.csv",
"BLT00275_T2.csv",
"BLT00286_T2.csv",
"HC_BLT00282_T2.csv",
"HC_BLT00287_T2.csv")]
if (test) {
filenames <- filenames[1:4]
}
read.flow_csv <- function(pathIN) {
message(pathIN)
raw <-
fread(
pathIN#,
# ,
# sep = ",",
# header = TRUE,
# stringsAsFactors = FALSE,
#nrows = 100
)
raw <- as.data.frame(raw)
# message(colnames(raw))
IND <- which(duplicated(raw))
# Check for duplicates and report if found:
if (any(duplicated(raw))) {
cat(paste0(
"=== Duplicate entries removed in [",
pathIN,
"]: ",
length(IND),
" ===\n"
))
print(head(raw[IND, ]))
cat("----\n")
}
#if ("GPR18...AF488.A" %in% colnames(raw)){
#  print("")
#  print(pathIN)
#  #print(colnames(raw))
#}
return(unique(raw))
}
# Read all:
dfs <- sapply(filenames, read.flow_csv, simplify = FALSE)
xlist <- c()
xlist <- c()
for (x in seq(length(dfs))) {
df <- dfs[[x]]
# print("")
# print(colnames(df))
# print("")
xlist <- append(xlist, colnames(df))
# xcolumnNames <- columnNames[columnNames %in% colnames(df)]
# xprettyColumnNames <- prettyColumnNames[columnNames %in% colnames(df)]
#
# # print(columnNames[!columnNames %in% colnames(df)])
#
# df <- df[, xcolumnNames]
# colnames(df) <- xprettyColumnNames
# dfs[[x]]  <- df
#
# if(length(xcolumnNames) < 6){
#   print(names(dfs[x]))
# }
}
unique(xlist)
columnNames
gpr18BCellsColumnNames
columnNames <- c(
"CD11b - 17BV421-A",
"CD11b - BV421-A",
"CD11b activated - PE-Cy7-A",
"CD11b activated-PE-Cy7-A",
"CD11b-17BV421-A",
"CD14 - BV605-A",
"CD14-BV605-A",
"CD16 - PE-CF595-A",
"CD16-PE-CF595-A",
"Chem23 - APC-A",
"FPRL1 - AF647-A",
"GPR18 - AF488-A",
"GPR32 - AF488-A",
"HLA-Dr - BV650-A",
"HLA-Dr-BV650-A",
"Zombie NIR-A"
)
prettyColumnNames <- c('CD11b',
'CD11b',
'CD11b_activated',
'CD11b_activated',
'CD11b',
'CD14',
'CD14',
'CD16',
'CD16',
'Chem23',
'Chem23',
'GPR18',
'GPR18',
'HLA_DR',
'HLA_DR',
'Zombie')
xlist <- c()
for (x in seq(length(dfs))) {
df <- dfs[[x]]
# print("")
# print(colnames(df))
# print("")
xlist <- append(xlist, colnames(df))
xcolumnNames <- columnNames[columnNames %in% colnames(df)]
xprettyColumnNames <- prettyColumnNames[columnNames %in% colnames(df)]
# print(columnNames[!columnNames %in% colnames(df)])
df <- df[, xcolumnNames]
colnames(df) <- xprettyColumnNames
dfs[[x]]  <- df
if(length(xcolumnNames) < 8){
print(names(dfs[x]))
}
}
dfs
BiocManager::install(
c(
"flowStats",
"openCyto",
"CytoML",
"Biobase",
"flowCore",
"flowVS",
"flowStats",
"FlowSOM",
"slingshot",
"flowCore",
"SingleCellExperiment",
"diffcyt",
"ComplexHeatmap"
)
)
BiocManager::install(
"FlowSOM"
)
BiocManager::install(
"FlowSOM"
)
try(library(FlowSOM))
BiocManager::install("FlowSOM")
