colnames(combinedDataset)[2:nrow(ex)]
model <- lm(survivalInMonthsFromVisitDate ~ RvD1 + RvD2 + RvD3, data = combinedDataset)
model <- lm(survivalInMonthsFromVisitDate ~ RvD1 + RvD2 + RvD3 + 17RRvD1, data = combinedDataset)
colnames(combinedDataset) <- gsub("-", "", colnames(combinedDataset))
colnames(combinedDataset) <- gsub(" ", "", colnames(combinedDataset))
colnames(combinedDataset) <- gsub(",", "", colnames(combinedDataset))
colnames(combinedDataset)
colnames(combinedDataset) <- gsub("-", "", colnames(combinedDataset))
colnames(combinedDataset) <- gsub(" ", "", colnames(combinedDataset))
colnames(combinedDataset) <- gsub(",", "", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[0]", "Zero", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[1]", "One", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[2]", "Two", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[3]", "Three", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[4]", "Four", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[5]", "Five", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[6]", "Six", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[7]", "Seven", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[8]", "Eight", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[9]", "Nine", colnames(combinedDataset))
colnames(combinedDataset)
reformulate(colnames(combinedDataset)[-1], colnames(combinedDataset)[2:nrow(ex)])
model <- lm(survivalInMonthsFromVisitDate ~ RvDOne + RvDTwo + RvDThree + OneFiveRLXBFour, data = combinedDataset)
colnames(combinedDataset)[2:nrow(ex)]
colnames(combinedDataset)[-1]
formulaString <- paste("survivalInMonthsFromVisitDate ~ ", colnames(combinedDataset)[2:nrow(ex)],sep = "")
formulaString
formulaString <- paste("survivalInMonthsFromVisitDate ~ ", paste(colnames(combinedDataset)[2:nrow(ex)], sep = "+"),sep = "")
formulaString
paste(colnames(combinedDataset)[2:nrow(ex)], sep = "+")
paste(colnames(combinedDataset)[2:nrow(ex)], sep = "+")
paste(colnames(combinedDataset)[2:nrow(ex)]
)
combinedDataset)[2:nrow(ex)]
colnames(combinedDataset)[2:nrow(ex)]
as.vector(colnames(combinedDataset)[2:nrow(ex)])
paste(colnames(combinedDataset)[2:nrow(ex)], collapse = '+')
formulaString <- paste("survivalInMonthsFromVisitDate ~ ", paste(colnames(combinedDataset)[2:nrow(ex)], collapse = '+'), collapse = "")
formulaString
formulaString <- paste("survivalInMonthsFromVisitDate ~ ", paste(colnames(combinedDataset)[2:nrow(ex)], collapse = ' + '), collapse = "")
formulaString
model <- lm(formulaString, data = combinedDataset)
summary(model)
as.formula(formulaString)
model <- lm(as.formula(formulaString), data = combinedDataset)
summary(model)
cor(transposedEx)
heatmap(cor(transposedEx))
heatmap(cor(t(na.omit(ex))))
ex <- read.csv(
"data/lipidomics/normalisedasinhTransformedExpressionDataRawOutliersAndDuplicatesRemoved.csv",
row.names = 1
)
ex <- na.omit(ex)
transposedEx <- t(ex)
clinical <-
read.csv("data/lipidomics/clinicalData.csv", row.names = 1)
head(clinical)
combinedDataset <- merge(transposedEx, clinical, by = 0, all.x=TRUE)
combinedDataset <- combinedDataset[!is.na(combinedDataset$survivalInMonthsFromVisitDate), ]
colnames(combinedDataset) <- gsub("-", "", colnames(combinedDataset))
colnames(combinedDataset) <- gsub(" ", "", colnames(combinedDataset))
colnames(combinedDataset) <- gsub(",", "", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[0]", "Zero", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[1]", "One", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[2]", "Two", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[3]", "Three", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[4]", "Four", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[5]", "Five", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[6]", "Six", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[7]", "Seven", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[8]", "Eight", colnames(combinedDataset))
colnames(combinedDataset) <- gsub("[9]", "Nine", colnames(combinedDataset))
as.vector(colnames(combinedDataset)[2:nrow(ex)])
### Linear model
formulaString <- paste("survivalInMonthsFromVisitDate ~ ", paste(colnames(combinedDataset)[2:nrow(ex)], collapse = ' + '), collapse = "")
model <- lm(as.formula(formulaString), data = combinedDataset)
summary(model)
clinical
head(clinical)
fit1 <- lme(fixed = formulaString, random = ~ 1 | Patient.ID, data = combinedDataset)
library(nlme)
fit1 <- lme(fixed = formulaString, random = ~ 1 | Patient.ID, data = combinedDataset)
formulaString <- paste("survivalInMonthsFromVisitDate ~ ", paste(colnames(combinedDataset)[2:nrow(ex)], collapse = ' + '), collapse = "")
formulaString <- as.formula(formulaString)
model <- lm(formulaString, data = combinedDataset)
summary(model)
# Mixed Linear model
library(nlme)
fit1 <- lme(fixed = formulaString, random = ~ 1 | Patient.ID, data = combinedDataset)
summary(fit1)
ex <- read.csv(
"data/lipidomics/normalisedasinhTransformedExpressionDataRawOutliersAndDuplicatesRemoved.csv",
row.names = 1
)
ex <- na.omit(ex)
transposedEx <- t(ex)
clinical <-
read.csv("data/lipidomics/clinicalData.csv", row.names = 1)
head(clinical)
combinedDataset <-
merge(transposedEx, clinical, by = 0, all.x = TRUE)
combinedDataset <-
combinedDataset[!is.na(combinedDataset$survivalInMonthsFromVisitDate), ]
colnames(combinedDataset) <-
gsub("-", "", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub(" ", "", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub(",", "", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[0]", "Zero", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[1]", "One", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[2]", "Two", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[3]", "Three", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[4]", "Four", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[5]", "Five", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[6]", "Six", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[7]", "Seven", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[8]", "Eight", colnames(combinedDataset))
colnames(combinedDataset) <-
gsub("[9]", "Nine", colnames(combinedDataset))
### Linear model
formulaString <-
paste("survivalInMonthsFromVisitDate ~ ",
paste(colnames(combinedDataset)[2:10
#nrow(ex)
]
, collapse = ' + '),
collapse = "")
formulaString <-
as.formula(formulaString)
model <-
lm(formulaString, data = combinedDataset)
summary(model)
# Mixed Linear model
library(nlme)
fit1 <-
lme(fixed = formulaString,
random = ~ 1 | Patient.ID,
data = combinedDataset)
summary(fit1)
combinedDataset[,2:nrow(ex)]
heatmap(cor(combinedDataset$survivalInMonthsFromVisitDate, combinedDataset[,2:nrow(ex)]))
heatmap(var(combinedDataset$survivalInMonthsFromVisitDate, combinedDataset[,2:nrow(ex)]))
heatmap(var(combinedDataset[,2:nrow(ex)], combinedDataset$survivalInMonthsFromVisitDate))
c("survivalInMonthsFromVisitDate", 2:nrow(ex)])
c("survivalInMonthsFromVisitDate", 2:nrow(ex))
heatmap(var(combinedDataset[,c("survivalInMonthsFromVisitDate", colnames(combinedDataset)[2:nrow(ex)])]))
combinedDataset[,c("survivalInMonthsFromVisitDate", colnames(combinedDataset)[2:nrow(ex)]
)]
heatmap(var(combinedDataset[,c("survivalInMonthsFromVisitDate", colnames(combinedDataset)[2:nrow(ex)])]))
heatmap(var(combinedDataset[,c("survivalInMonthsFromVisitDate", colnames(combinedDataset)[2:nrow(ex)])]))
heatmaply(var(combinedDataset[,c("survivalInMonthsFromVisitDate", colnames(combinedDataset)[2:nrow(ex)])]))
library("heatmaply")
heatmaply(var(combinedDataset[,c("survivalInMonthsFromVisitDate", colnames(combinedDataset)[2:nrow(ex)])]))
heatmaply(cor(combinedDataset[,c("survivalInMonthsFromVisitDate", colnames(combinedDataset)[2:nrow(ex)])]))
heatmaply(cor(x = combinedDataset[,colnames(combinedDataset)[2:nrow(ex)]],
y = combinedDataset[,"survivalInMonthsFromVisitDate"]))
heatmap(cor(x = combinedDataset[,colnames(combinedDataset)[2:nrow(ex)]],
y = combinedDataset[,"survivalInMonthsFromVisitDate"]))
cor(x = combinedDataset[,colnames(combinedDataset)[2:nrow(ex)]],
y = combinedDataset[,"survivalInMonthsFromVisitDate"])
correlationsToSurvival <- cor(x = combinedDataset[,colnames(combinedDataset)[2:nrow(ex)]],
y = combinedDataset[,"survivalInMonthsFromVisitDate"])
order(correlationsToSurvival)
correlationsToSurvival[order(correlationsToSurvival),]
correlationsToSurvival[order(correlationsToSurvival)]
correlationsToSurvival[order(correlationsToSurvival),]
ex <-
read.csv("data/lipidomics/expressionDataRaw.csv", row.names = 1)
ex <- ex[names(sort(sapply(ex, max, na.rm = T), decreasing = T))]
asinhTransformedEx <- asinh(ex)
write.csv(asinhTransformedEx,
"data/lipidomics/asinhTransformedExpressionDataAllSamples.csv")
outliers <- c(#"FE7", "FL7",
"FL10", "FE10")
ex <- ex[,-which(names(ex) %in% outliers)]
ex <- asinh(ex)
write.csv(
ex,
"data/lipidomics/asinhTransformedExpressionDataOutliersAndDuplicatesRemoved.csv"
)
outliers <-
append(
outliers,
c(
"H10",
"H3",
"H1",
"H9",
"H8",
"H4",
"H5",
"H2",
"H6",
"FE10",
"FE5",
"FL10",
"FL5",
"SE5",
"SL5"
)
)
ex <- ex[,-which(names(ex) %in% outliers)]
ex <- normalizeBetweenArrays(ex) # normalize data
write.csv(
ex,
"data/lipidomics/normalisedasinhTransformedExpressionDataRawOutliersAndDuplicatesRemoved.csv"
)
library(limma)
library(umap)
ex <- read.csv(
"data/lipidomics/normalisedasinhTransformedExpressionDataRawOutliersAndDuplicatesRemoved.csv", row.names = 1
)
clinical <-
read.csv("data/lipidomics/clinicalData.csv", row.names = 1)
clinical <- clinical[-which(rownames(clinical) %in% outliers),]
clinical <- clinical[order(row.names(clinical)),]
ex <- ex[, order(colnames(ex))]
ex <- ex[complete.cases(ex),]
clinical <- clinical[which(rownames(clinical) %in% colnames(ex)),]
colnames(ex) == row.names(clinical)
clinical$Patient.ID <- clinical$Patient.ID
clinical$caseControlExperiment <- clinical$caseControlExperiment
clinical$sightOnsetExperiment <- clinical$sightOnsetExperiment
clinical$progressionExperiment <- clinical$progressionExperiment
clinical$fastSlow <- clinical$fastSlow
clinical$siteOfOnset  <- clinical$siteOfOnset
clinical$ethnicity <- clinical$ethnicity
clinical$gender <- clinical$gender
clinical$statinUse <- clinical$statinUse
performDifferentialExpression <-
function(ex, design, cont.matrix, experimentName, clinical = NULL, pairwiseTest = FALSE) {
# put this in a function
# calculate precision weights and show plot of mean-variance trend
v <- vooma(ex, design, plot = TRUE)
if (pairwiseTest) {
corfit <- duplicateCorrelation(v,design,block=clinical$Patient.ID)
fit <- lmFit(v, design, block=clinical$Patient.ID, correlation=corfit$consensus)
} else {
fit  <- lmFit(v)
}
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
# Visualize and quality control test results.
# Build histogram of P-values for all genes. Normal test
# assumption is that most genes are not differentially expressed.
tT2 <- topTable(fit2,
adjust = "fdr",
sort.by = "B",
number = Inf)
write.csv(tT2,
"data/lipidomics/Results/differentialExpressionProgressionResults.csv")
figureDirectory <- "data/lipidomics/Results/"
par(mar = c(1, 1, 1, 1))
jpeg(file = paste0(figureDirectory,
"histogram",
experimentName,
".jpeg"))
hist(
tT2$adj.P.Val,
col = "grey",
border = "white",
xlab = "P-adj",
ylab = "Number of genes",
main = "P-adj value distribution"
)
dev.off()
gc()
# summarize test results as "up", "down" or "not expressed"
dT <- decideTests(fit2, adjust.method = "fdr", p.value = 0.05)
jpeg(file = paste0(figureDirectory,
"qqPlot",
experimentName,
".jpeg"))
# create Q-Q plot for t-statistic
t.good <- which(!is.na(fit2$F)) # filter out bad probes
qqt(fit2$t[t.good], fit2$df.total[t.good], main = "Moderated t statistic")
abline(0, 1)
dev.off()
# volcano plot (log P-value vs log fold change)
colnames(fit2) # list contrast names
ct <- 1        # choose contrast of interest
for (n in seq(ncol(fit2))) {
jpeg(file = paste0(
figureDirectory,
"volcanoPlot",
colnames(fit2)[n],
experimentName,
".jpeg"
))
volcanoplot(
fit2,
coef = n,
main = colnames(fit2)[n],
pch = 20,
highlight = length(which(dT[, n] != 0)),
names = rep('+', nrow(fit2))
)
dev.off()
jpeg(
file = paste0(
figureDirectory,
"meanDifferencePlot",
colnames(fit2)[n],
experimentName,
".jpeg"
)
)
# MD plot (log fold change vs mean log expression)
# highlight statistically significant (p-adj < 0.05) probes
plotMD(
fit2,
column = n,
status = dT[, n],
legend = F,
pch = 20,
cex = 1
)
abline(h = 0)
dev.off()
tT <- topTable(
fit2,
adjust = "fdr",
sort.by = "P",
number = 10,
coef = n
)
write.csv(tT, paste0(figureDirectory, experimentName, colnames(fit2)[n], ".csv"))
significantResults <- tT[tT$adj.P.Val < 0.05,]
if (nrow(significantResults) > 0) {
print(colnames(fit2)[n])
print(significantResults)
}
}}
### Case vs Control Experiment
clinical$group <- clinical$caseControlExperiment
experimentName <- "CaseVsControl"
design <- model.matrix(
~ 0
+ group
+ ageAtSample
+ ethnicity
+ gender
+ sampleStorageDays
+ statinUse
,
clinical
)
# set up contrasts of interest and recalculate model coefficients
cont.matrix <- makeContrasts(
ControlVsEarly = groupControl - groupEarly,
ControlVsLate =groupControl - groupLate,
EarlyVsControl = groupEarly - groupControl,
LateVsControl = groupLate - groupControl,
levels = design
)
performDifferentialExpression(ex, design, cont.matrix, experimentName)
# No Controls
experimentName <- "EarlyVsLate"
design <- model.matrix(
~ 0
+ group
+ ageAtSample
+ ethnicity
+ gender
+ sampleStorageDays
+ statinUse
#+ timeFromEarlySampleInDays
+ timeFromOnsetToVisitInDays
+ siteOfOnset
+ fastSlow
,
clinical[clinical$group != "Control", ]
)
# set up contrasts of interest and recalculate model coefficients
cont.matrix <- makeContrasts(
EarlyVsLate = groupEarly - groupLate,
LateVsEarly = groupLate - groupEarly,
levels = design
)
performDifferentialExpression(ex[,colnames(ex) %in% rownames(clinical[clinical$group != "Control", ])],
design, cont.matrix, experimentName, clinical[clinical$group != "Control", ], TRUE)
### Progression Experiment
clinical$group <- clinical$progressionExperiment
experimentName <- "ProgressionVsControl"
design <- model.matrix(
~ 0
+ group
+ ageAtSample
+ ethnicity
+ gender
+ sampleStorageDays
+ statinUse
,
clinical
)
# set up contrasts of interest and recalculate model coefficients
cont.matrix <- makeContrasts(
ControlVsSlowLate =   groupControl - groupSlowLate,
ControlVsSlowEarly = groupControl - groupSlowEarly,
ControlVsFastEarly = groupControl - groupFastEarly,
ControlVsFastLate = groupControl - groupFastLate,
SlowLateVsControl = groupSlowLate - groupControl,
FastEarlyVsControl = groupFastEarly - groupControl,
SlowEarlyVsControl = groupSlowEarly - groupControl,
FastLateVsControl =groupFastLate - groupControl,
levels = design
)
performDifferentialExpression(ex, design, cont.matrix, experimentName)
experimentName <- "FastVsSlow"
design <- model.matrix(
~ 0
+ group
+ ageAtSample
+ ethnicity
+ gender
+ sampleStorageDays
+ statinUse
#+ timeFromEarlySampleInDays
+ timeFromOnsetToVisitInDays
+ siteOfOnset
,
clinical[clinical$group != "Control", ]
)
# set up contrasts of interest and recalculate model coefficients
cont.matrix <- makeContrasts(
SlowLateVsFastLate = groupSlowLate - groupFastLate,
SlowLateVsFastEarly = groupSlowLate - groupFastEarly,
SlowLateVsSlowEarly = groupSlowLate - groupSlowEarly,
SlowEarlyVsFastLate = groupSlowEarly - groupFastLate,
SlowEarlyVsSlowLate = groupSlowEarly - groupSlowLate,
SlowEarlyVsFastEarly = groupSlowEarly - groupFastEarly,
FastLateVsFastEarly = groupFastLate - groupFastEarly,
FastLateVsSlowEarly = groupFastLate - groupSlowEarly,
FastLateVsSlowLate = groupFastLate - groupSlowLate,
FastEarlyVsFastLate = groupFastEarly - groupFastLate,
FastEarlyVsSlowLate = groupFastEarly - groupSlowLate,
FastEarlyVsSlowEarly = groupFastEarly - groupSlowEarly,
levels = design
)
performDifferentialExpression(ex[,colnames(ex) %in% rownames(clinical[clinical$group != "Control", ])],
design, cont.matrix, experimentName, clinical[clinical$group != "Control", ], TRUE)
### Site of Onset Experiment
clinical$group <- clinical$sightOnsetExperiment
experimentName <- "SightOfOnsetVsControl"
design <- model.matrix(
~ 0
+ group
+ ageAtSample
+ ethnicity
+ gender
+ sampleStorageDays
+ statinUse,
clinical
)
# set up contrasts of interest and recalculate model coefficients
cont.matrix <- makeContrasts(
ControlVsBulbarLate =   groupControl - groupBulbarLate,
ControlVsBulbarEarly =   groupControl - groupBulbarEarly,
ControlVsLimbLate =   groupControl - groupLimbLate,
ControlVsLimbEarly =   groupControl - groupLimbEarly,
BulbarLateVsControl =   groupBulbarLate - groupControl,
BulbarEarlyVsControl =   groupBulbarEarly - groupControl,
LimbLateVsControl =   groupLimbLate - groupControl,
LimbEarlyVsControl =   groupLimbEarly - groupControl,
levels = design
)
performDifferentialExpression(ex, design, cont.matrix, experimentName)
experimentName <- "BulbarVsLimb"
design <- model.matrix(
~ 0
+ group
+ ageAtSample
+ ethnicity
+ gender
+ sampleStorageDays
+ statinUse
#+ timeFromEarlySampleInDays
+ timeFromOnsetToVisitInDays
+ fastSlow
,
clinical[clinical$group != "Control", ]
)
# set up contrasts of interest and recalculate model coefficients
cont.matrix <- makeContrasts(
BulbarEarlyVsBulbarLate =  groupBulbarEarly - groupBulbarLate,
BulbarEarlyVsLimbEarly = groupBulbarEarly - groupLimbEarly,
BulbarEarlyVsLimbLate = groupBulbarEarly - groupLimbLate,
BulbarLateVsBulbarEarly = groupBulbarLate - groupBulbarEarly,
BulbarLateVsLimbEarly = groupBulbarLate - groupLimbEarly,
BulbarLateVsLimbLate = groupBulbarLate - groupLimbLate,
LimbEarlyVsBulbarEarly = groupLimbEarly - groupBulbarEarly,
LimbEarlyVsBulbarLate = groupLimbEarly - groupBulbarLate,
LimbEarlyVsLimbLate = groupLimbEarly - groupLimbLate,
LimbLateVsBulbarEarly = groupLimbLate - groupBulbarEarly,
LimbLateVsBulbarLate = groupLimbLate - groupBulbarLate,
LimbLateVsLimbEarly =   groupLimbLate - groupLimbEarly,
levels = design
)
performDifferentialExpression(ex[,colnames(ex) %in% rownames(clinical[clinical$group != "Control", ])],
design, cont.matrix, experimentName, clinical[clinical$group != "Control", ], TRUE)
