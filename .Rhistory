"Not Significant" = "black"
)
labelValues <- c("ALS vs Healthy Controls",
"Fast Progressors vs Healthy Controls",
"Fast Progressors vs Slow Progressors",
"Slow Progressors vs Healthy Controls")
combinedDf$fdr_label <- as.factor(combinedDf$fdr_label)
combinedDf$comparison <- as.factor(combinedDf$comparison)
p <- ggplot(data = combinedDf,
aes(
x = logFC,
y = minus_log_p_val,
col = fdr_label,
label = fdr_label
)) +
geom_point(
aes(shape=comparison)
) +
theme_minimal() +
#scale_colour_viridis_d() +
scale_colour_manual(values = mycolors) +
xlab("log2(Fold Change)") + ylab("-log10(P-value)") +
xlim(-0.5, 0.5) +
ylim(0, 10) +
scale_shape_discrete(labels = labelValues) +
guides(colour = guide_legend("Cell Types"),
shape = guide_legend("Comparison")) +
theme(axis.title = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8))
#geom_text_repel()
print(p)
filteredcombinedDf <- combinedDf
#filteredcombinedDf <- filteredcombinedDf[filteredcombinedDf$fdr_adjusted_p_val <= 0.05,]
filteredcombinedDf <- filteredcombinedDf[filteredcombinedDf$fdr_label != "Monocytes",]
filteredcombinedDf$fdr_label <- gsub(" Classical ", " \n Clasical ", filteredcombinedDf$fdr_label)
filteredcombinedDf$fdr_label <- gsub(" Non-Classical ", " \n Non-Classical ", filteredcombinedDf$fdr_label)
filteredcombinedDf$fdr_label <- gsub(" Intermediate ", " \n Intermediate ", filteredcombinedDf$fdr_label)
head(filteredcombinedDf)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(stringr)
workingDirectory <- getwd()
setwd(paste0("./data/pValueAdjustmentsResults/"))
files <- c(
"meta_clusters_flowsomcaseControlVisits1AllCellsDifferentialStatesStatisticscsvClusters.csv",
"meta_clusters_flowsomcaseControlVisits1FastAllCellsDifferentialStatesStatisticscsvClusters.csv",
"meta_clusters_flowsomcaseControlVisits1SlowAllCellsDifferentialStatesStatisticscsvClusters.csv",
"meta_clusters_flowsomfastSlowVisits1AllCellsDifferentialStatesStatisticscsvClusters.csv"
)
for (file in files) {
df <-
read.csv(file)
df <- df[df$panel == "monocytes", ]
df$fdr_label <- df$typeOfCells
df$fdr_label <- gsub(' Negative/Low', '-', df$fdr_label)
df[df$fdr_adjusted_p_val > 0.05, "fdr_label"] <- NA
df$minus_log_p_val <- 0 - log(df$p_val)
mycolors <- data.frame(DOWN = "blue",
UP = "red",
NO = "black")
p <- ggplot(data = df,
aes(
x = logFC,
y = minus_log_p_val,
col = fdr_diff_expressed,
label = fdr_label
)) +
geom_point() +
theme_minimal() +
scale_colour_manual(values = mycolors) +
xlab("log2(Fold Change)") + ylab("-log10(P-value)") +
xlim(-0.5, 0.5) +
ylim(0, 10) +
geom_text_repel(size = 2, force_pull = 0, max.time = 2) +
theme(legend.position = "none")
print(p)
}
comparisons <- c(
"ALS_vs_Healthy_Controls",
"Fast_Progressors_vs_Healthy_Controls",
"Slow_Progressors_vs_Healthy_Controls",
"Fast_Progressors_vs_Slow_Progressors"
)
filesDf <- data.frame(files, comparisons)
for (file in seq(nrow(filesDf))) {
df <-
read.csv(filesDf[file, "files"])
df <- df[df$panel == "monocytes", ]
df$comparison <- filesDf[file, "comparisons"]
df$fdr_label <- df$typeOfCells
df$fdr_label <- gsub(' Negative/Low', '-', df$fdr_label)
#df[df$fdr_adjusted_p_val > 0.05, "fdr_label"] <- "Not Significant"
df$minus_log_p_val <- 0 - log(df$p_val)
if (exists("combinedDf")) {
combinedDf <- rbind(combinedDf, df)
} else {
combinedDf <- df
}
}
unique(combinedDf$fdr_label)
mycolors <- list(
"HLA-DR- Activated CD11b+ Classical Monocytes" = "#f94144",
"HLA-DR- Classical Monocytes" = "#f3722c",
"HLA-DR- Intermediate Monocytes" = "#90be6d",
"HLA-DR- Activated CD11b+ Intermediate Monocytes" = "#43aa8b",
"HLA-DR- Non-Classical Monocytes" = "#577590",
"HLA-DR- Activated CD11b+ Non-Classical Monocytes" = "#277da1",
"Not Significant" = "black"
)
labelValues <- c("ALS vs Healthy Controls",
"Fast Progressors vs Healthy Controls",
"Fast Progressors vs Slow Progressors",
"Slow Progressors vs Healthy Controls")
combinedDf$fdr_label <- as.factor(combinedDf$fdr_label)
combinedDf$comparison <- as.factor(combinedDf$comparison)
p <- ggplot(data = combinedDf,
aes(
x = logFC,
y = minus_log_p_val,
col = fdr_label,
label = fdr_label
)) +
geom_point(
aes(shape=comparison)
) +
theme_minimal() +
#scale_colour_viridis_d() +
scale_colour_manual(values = mycolors) +
xlab("log2(Fold Change)") + ylab("-log10(P-value)") +
xlim(-0.5, 0.5) +
ylim(0, 10) +
scale_shape_discrete(labels = labelValues) +
guides(colour = guide_legend("Cell Types"),
shape = guide_legend("Comparison")) +
theme(axis.title = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8))
#geom_text_repel()
print(p)
filteredcombinedDf <- combinedDf
#filteredcombinedDf <- filteredcombinedDf[filteredcombinedDf$fdr_adjusted_p_val <= 0.05,]
filteredcombinedDf <- filteredcombinedDf[filteredcombinedDf$fdr_label != "Monocytes",]
filteredcombinedDf$fdr_label <- gsub(" Classical ", " \n Clasical ", filteredcombinedDf$fdr_label)
filteredcombinedDf$fdr_label <- gsub(" Non-Classical ", " \n Non-Classical ", filteredcombinedDf$fdr_label)
filteredcombinedDf$fdr_label <- gsub(" Intermediate ", " \n Intermediate ", filteredcombinedDf$fdr_label)
filteredcombinedDf$fdr_label <- paste0(filteredcombinedDf$fdr_label, " (", df[, "cluster_id"], ")")
filteredcombinedDf$comparison <- str_replace_all(filteredcombinedDf$comparison, "_", " ")
head(filteredcombinedDf)
ggplot(filteredcombinedDf, aes(x = fdr_label, y = minus_log_p_val,
color = as.factor(comparison), size = logFC)) +
geom_point() +
xlab("Monocyte Populations") + ylab("-log10(P-value)") +
guides(colour = guide_legend("Comparisons",
override.aes = list(size=5)),
size = guide_legend("Log2(Fold Change)")) +
theme(axis.text.x = element_text(angle = 90, size = 8)) +
scale_colour_viridis_d(alpha = 0.75) +
ylim(0, 10) +
geom_hline(yintercept = 0-log10(0.00001))
setwd(workingDirectory)
filteredcombinedDf$fdr_label
unique(filteredcombinedDf$fdr_label)
head(filteredcombinedDf)
filteredcombinedDf[, ("cluster_id", "fdr_label")]
filteredcombinedDf[, c("cluster_id", "fdr_label")]
filteredcombinedDf[, c("cluster_id", "fdr_label")]
filteredcombinedDf <- combinedDf
#filteredcombinedDf <- filteredcombinedDf[filteredcombinedDf$fdr_adjusted_p_val <= 0.05,]
filteredcombinedDf <- filteredcombinedDf[filteredcombinedDf$fdr_label != "Monocytes",]
filteredcombinedDf$fdr_label <- gsub(" Classical ", " \n Clasical ", filteredcombinedDf$fdr_label)
filteredcombinedDf$fdr_label <- gsub(" Non-Classical ", " \n Non-Classical ", filteredcombinedDf$fdr_label)
filteredcombinedDf$fdr_label <- gsub(" Intermediate ", " \n Intermediate ", filteredcombinedDf$fdr_label)
filteredcombinedDf$fdr_label <- paste0(filteredcombinedDf$fdr_label, " (", filteredcombinedDf[, "cluster_id"], ")")
filteredcombinedDf[, c("cluster_id", "fdr_label")]
filteredcombinedDf$comparison <- str_replace_all(filteredcombinedDf$comparison, "_", " ")
head(filteredcombinedDf)
ggplot(filteredcombinedDf, aes(x = fdr_label, y = minus_log_p_val,
color = as.factor(comparison), size = logFC)) +
geom_point() +
xlab("Monocyte Populations") + ylab("-log10(P-value)") +
guides(colour = guide_legend("Comparisons",
override.aes = list(size=5)),
size = guide_legend("Log2(Fold Change)")) +
theme(axis.text.x = element_text(angle = 90, size = 8)) +
scale_colour_viridis_d(alpha = 0.75) +
ylim(0, 10) +
geom_hline(yintercept = 0-log10(0.00001))
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
# Define if it is Differential States or Differential Abundance Aanlaysis
clusterNames <- clusterColumns
# clusterName <- clusterNames[4]
# clusterNames <- clusterNames[3]
markersOrCells <- markersOrCellsClassification
setwd("..")
setwd("..")
getwd()
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
# Define if it is Differential States or Differential Abundance Aanlaysis
clusterNames <- clusterColumns
# clusterName <- clusterNames[4]
# clusterNames <- clusterNames[3]
markersOrCells <- markersOrCellsClassification
clusterName <- clusterNames[4]
clusterName
clusterName <- clusterNames[3]
clusterName
markersOrCellsClassification
markersOrCell <- markersOrCells[1]
paste0("gpr32fdr", clusterName, "fastSlowVisits1AllCellsDifferentialStatesStatisticscsv", markersOrCell , "Clusters.csv")
paste0("./data/pValueAdjustmentsResults/",
"gpr32fdr", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , "Clusters.csv")
dsResults <- read.csv(
paste0("./data/pValueAdjustmentsResults/",
"gpr32fdr", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , "Clusters.csv")
)
getwd()
dsResults <- read.csv(
paste0("./data/pValueAdjustmentsResults/",
"gpr32fdr", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , ".csv")
)
for (markersOrCell in markersOrCells) {
dsResults <- read.csv(
paste0("/data/pValueAdjustmentsResults/",
"gpr32fdr", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , ".csv")
)
}
dsResults <- read.csv(
paste0("/data/pValueAdjustmentsResults/",
"gpr32fdr", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , ".csv")
)
dsResults <- read.csv(
paste0("./data/pValueAdjustmentsResults/",
"gpr32fdr", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , ".csv")
)
dsResults <- read.csv(
paste0("data/pValueAdjustmentsResults/",
"gpr32fdr", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , ".csv")
)
getwd()
setwd("./data")
setwd("..")
setwd("./data/pValueAdjustmentsResults")
paste0("gpr32fdr", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , ".csv")
read.csv(paste0("gpr32fdr", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , ".csv"))
a <- read.csv(paste0(clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , ".csv"))
setwd("..")
setwd("..")
dsResults <- read.csv(
paste0("data/pValueAdjustmentsResults/", clusterName,
"fastSlowVisits1AllCellsDifferentialStatesStatisticscsv",
markersOrCell , ".csv")
)
dsResults
dsResults <- dsResults[dsResults$fdr_adjusted_p_val <= 0.05,]
dsResults
results <- read.csv("data/medianValues/medianValues.csv")
try(library(readxl))
experimentInfo <- read_excel("data/metadata/clinicalData.csv")
experimentInfo <- read_excel("data/metadata/clinicalData.xlsx")
experimentInfo
experimentInfo <- as.data.frame(experimentInfo)
experimentInfo
results
experimentInfo
combinedDf <- merge(results, experimentInfo, by.x = "fileName", by.y = "sample_id")
combinedDf
combinedDf <- merge(results, experimentInfo, by.x = "fileName", by.y = "sample_id", all.x = TRUE)
combinedDf$outcomeDeathDate
combinedDf[!is.na(combinedDf$outcomeDeathDate), "outcomeDeathDate"]
combinedDf[!is.na(combinedDf$outcomeDeathDate) | combinedDf$outcomeDeathDate == "NA", "outcomeDeathDate"]
combinedDf[!is.na(combinedDf$outcomeDeathDate) | !combinedDf$outcomeDeathDate == "NA", "outcomeDeathDate"]
combinedDf[!is.na(combinedDf$outcomeDeathDate) | combinedDf$outcomeDeathDate != "NA", "outcomeDeathDate"]
combinedDf[!is.na(combinedDf$outcomeDeathDate) | combinedDf$outcomeDeathDate == "NA", "outcomeDeathDate"]
combinedDf[!is.na(combinedDf$outcomeDeathDate) , "outcomeDeathDate"]
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
results <- read.csv("data/medianValues/medianValues.csv")
experimentInfo <- read_excel("data/metadata/clinicalData.xlsx")
experimentInfo <- as.data.frame(experimentInfo)
combinedDf <- merge(results, experimentInfo, by.x = "fileName", by.y = "sample_id", all.x = TRUE)
combinedDf[!is.na(combinedDf$outcomeDeathDate) , "outcomeDeathDate"]
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
results <- read.csv("data/medianValues/medianValues.csv")
experimentInfo <- read_excel("data/metadata/clinicalData.xlsx")
experimentInfo <- as.data.frame(experimentInfo)
combinedDf <- merge(results, experimentInfo, by.x = "fileName", by.y = "sample_id", all.x = TRUE)
combinedDf[!is.na(combinedDf$outcomeDeathDate) , "outcomeDeathDate"]
combinedDf <- combinedDf[!is.na(combinedDf$outcomeDeathDate) , "outcomeDeathDate"]
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
results <- read.csv("data/medianValues/medianValues.csv")
experimentInfo <- read_excel("data/metadata/clinicalData.xlsx")
experimentInfo <- as.data.frame(experimentInfo)
combinedDf <- merge(results, experimentInfo, by.x = "fileName", by.y = "sample_id", all.x = TRUE)
combinedDf <- combinedDf[!is.na(combinedDf$outcomeDeathDate) , "outcomeDeathDate"]
combinedDf
combinedDf <- merge(results, experimentInfo, by.x = "fileName", by.y = "sample_id", all.x = TRUE)
combinedDf <- combinedDf[!is.na(combinedDf$outcomeDeathDate), ]
combinedDf
colnames(combinedDf)
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
results <- read.csv("data/medianValues/medianValues.csv")
experimentInfo <- read_excel("data/metadata/clinicalData.xlsx")
experimentInfo <- as.data.frame(experimentInfo)
combinedDf <- merge(results, experimentInfo, by.x = "fileName", by.y = "sample_id", all.x = TRUE)
combinedDf <- combinedDf[!is.na(combinedDf$outcomeDeathDate), ]
colnames(combinedDf)
head(combinedDf)
linearModel <- lm(survivalFromVisit~medianValue, data = combinedDf) #Create the linear regression
summary(linearModel)
coef(linearModel)
linearModel <- lm(survivalFromVisit ~ 0 + medianValue, data = combinedDf) #Create the linear regression
summary(linearModel)
coef(linearModel)
ggplot(filteredcombinedDf, aes(x = fdr_label, y = minus_log_p_val,
color = as.factor(comparison), size = logFC)) +
geom_point() +
xlab("Monocyte Populations") + ylab(bquote(log[10]~p)
"-log10(P-value)") +
guides(colour = guide_legend("Comparisons",
override.aes = list(size=5)),
size = guide_legend("Log2(Fold Change)")) +
theme(axis.text.x = element_text(angle = 90, size = 8)) +
scale_colour_viridis_d(alpha = 0.75) +
ylim(0, 10) +
geom_hline(yintercept = 0-log10(0.00001))
bquote(log[10]~p)
a <- 2
bquote(a == a)
quote(a == a)
bquote(a == .(a))
substitute(a == A, list(A = a))
plot(1:10, a*(1:10), main = bquote(a == .(a)))
default <- 1
bquote( function(x, y = .(default)) x+y )
linearModel <- lm(survivalFromVisit ~ medianValue, data = combinedDf) #Create the linear regression
summary(linearModel)
coef(linearModel)
summary(linearModel)
linearModel <- lm(survivalFromVisit ~ medianValue, data = combinedDf) #Create the linear regression
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue, data = combinedDf) #Create the linear regression
summary(linearModel)
summary(noInterceptLinearModel)
coef(linearModel)
coef(noInterceptLinearModel)
summary(linearModel)
summary(noInterceptLinearModel)
summary(linearModel)
summary(noInterceptLinearModel)
plot(noInterceptLinearModel)
combinedDf
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + (1|fileName), data = combinedDf) #Create the linear regression
combinedDf$fileName <- factor(combinedDf$fileName)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + (1|fileName), data = combinedDf) #Create the linear regression
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + (fileName), data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
library(lme4)
mixed.lmer <- lmer(survivalFromVisit ~ 0 + medianValue + (1|fileName), data = combinedDf)
combinedDf
combinedDf <- combinedDf[combinedDf$visit == 1, ]
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + (fileName), data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
mixed.lmer <- lmer(survivalFromVisit ~ 0 + medianValue #+ (1|fileName)
, data = combinedDf)
summary(mixed.lmer)
mixed.lmer <- lmer(survivalFromVisit ~ 0 + medianValue + (1|fileName)
, data = combinedDf)
combinedDf <- merge(results, experimentInfo, by.x = "fileName", by.y = "sample_id", all.x = TRUE)
combinedDf <- combinedDf[!is.na(combinedDf$outcomeDeathDate), ]
combinedDf$fileName <- factor(combinedDf$fileName)
mixed.lmer <- lmer(survivalFromVisit ~ 0 + medianValue + (1|fileName)
, data = combinedDf)
summary(mixed.lmer)
1|fileName
fileName
combinedDf
1|combinedDf$fileName
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + (fileName), data = combinedDf) #Create the linear regression
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue #+ (fileName)
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + (1|ageAtVisit)
, data = combinedDf)
summary(noInterceptLinearModel)
try(source("R/01_functions.R"))
try(source("R/00_datasets.R"))
loadlibraries()
results <- read.csv("data/medianValues/medianValues.csv")
experimentInfo <- read_excel("data/metadata/clinicalData.xlsx")
experimentInfo <- as.data.frame(experimentInfo)
combinedDf <- merge(results, experimentInfo, by.x = "fileName", by.y = "sample_id", all.x = TRUE)
combinedDf <- combinedDf[!is.na(combinedDf$outcomeDeathDate), ]
combinedDf$fileName <- factor(combinedDf$fileName)
#combinedDf <- combinedDf[combinedDf$visit == 1, ]
# No interecepot model
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + (1|ageAtVisit)
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
combinedDf$ageAtVisit
summary(noInterceptLinearModel)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + ageAtVisit
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
res <- model.matrix(~fileName, data = combinedDf)
res
model.matrix(~fileName, data = combinedDf)
colnames(combinedDf)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + ageAtVisit +
gender
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + ageAtVisit +
(1|gender)
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue + ageAtVisit                              , data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
colnames(combinedDf)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
ageAtVisit + gender + ethnicity
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
combinedDf <- combinedDf[combinedDf$visit == 1, ]
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
ageAtVisit + gender + ethnicity
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
colnames(combinedDf)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
ageAtVisit + gender + ethnicity + ageAtOnset
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
ageAtVisit + gender
, data = combinedDf)
noInterceptLinearModel
summary(noInterceptLinearModel)
colnames(combinedDf)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
ageAtVisit + gender + ethnicity + BulbarLimb +
ageAtOnset
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
colnames(combinedDf)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
gender + ethnicity + BulbarLimb +
ageAtVisit + ageAtOnset + diagnosticDelayInYears
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
plot(noInterceptLinearModel)
# No interecepot model
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
# gender + ethnicity + BulbarLimb +
ageAtVisit #+ ageAtOnset + diagnosticDelayInYears
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
coef(noInterceptLinearModel)
plot(noInterceptLinearModel)
summary(noInterceptLinearModel)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
gender + #ethnicity + BulbarLimb +
ageAtVisit #+ ageAtOnset + diagnosticDelayInYears
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
gender + ethnicity + BulbarLimb +
ageAtVisit #+ ageAtOnset + diagnosticDelayInYears
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
noInterceptLinearModel <- lm(survivalFromVisit ~ 0 + medianValue +
gender + ethnicity + BulbarLimb +
ageAtVisit + ageAtOnset + diagnosticDelayInYears
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
colnames(combinedDf)
noInterceptLinearModel <- lm(diseaseDurationInYears ~ 0 + medianValue +
gender + ethnicity + BulbarLimb +
ageAtVisit + ageAtOnset + diagnosticDelayInYears
, data = combinedDf) #Create the linear regression
summary(noInterceptLinearModel)
